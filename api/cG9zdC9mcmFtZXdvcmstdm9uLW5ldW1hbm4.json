{"title":"分析冯·诺依曼体系结构","date":"2019-05-08T01:40:48.000Z","thumbnail":"https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3246068745,2224323950&fm=26&gp=0.jpg","slug":"framework-von-neumann","tags":["摘录","架构设计"],"updated":"2019-05-08T07:37:46.213Z","content":"<p>冯·诺依曼体系结构的不凡之处在于，它想“解决一切可以用‘计算’来解决的问题”。</p>\n<a id=\"more\"></a>\n<h2 id=\"分析架构的关键点\">分析架构的关键点<a href=\"post/framework-von-neumann#分析架构的关键点\"></a></h2><blockquote>\n<p>我们应该如何去分析架构设计中涉及的每一个零部件？</p>\n</blockquote>\n<p>换句话说，当我们设计或分析一个零部件时，我们会关心哪些问题？</p>\n<h3 id=\"需求\">需求<a href=\"post/framework-von-neumann#需求\"></a></h3><p>这个零部件的作用是什么？它能用来做哪些事情？它不会被用来做哪些事情？</p>\n<p>为何这个零部件被设计用来干这些事情，而不是多干一点事情，或少干某些事情？</p>\n<h3 id=\"规格\">规格<a href=\"post/framework-von-neumann#规格\"></a></h3><p>这个零部件的接口是什么样的？它如何与其他零部件连接在一起的？</p>\n<p><strong>规格是零部件的连接需求的抽象</strong>。符合规格的零部件可以有非常多种可能的实现方案，但是，一旦规格中的某个条件不能满足了，它就无法正常完成与其他零部件的连接，以达到预期的需求目标。</p>\n<p><strong>规格的约束条件是非常多样化的</strong>。可能是外观（如形状和颜色）、交互方式（如键盘、鼠标、语音、触摸屏）、质量（硬度、耐热性等）。</p>\n<p>那么，冯·诺依曼体系结构的需求和规格又是什么呢？</p>\n<h2 id=\"冯·诺依曼体系结构分析\">冯·诺依曼体系结构分析<a href=\"post/framework-von-neumann#冯·诺依曼体系结构分析\"></a></h2><p><strong>冯·诺依曼体系结构不但是应用程序这座大厦的地基，同时也是整个信息科技的地基</strong>。事实上，它更像是一个无中生有的全新世界：在其中，有个体、有族群、有生态，还有喜怒哀乐。</p>\n<p><strong>从需求来说，它想解决一切问题。解决一切可以用“计算”来解决的问题</strong>。</p>\n<p>为了实现“解决一切可以用‘计算’来解决的问题”这个目标，冯·诺依曼引入了三类基础零部件：</p>\n<ul>\n<li>中央处理器</li>\n<li>存储</li>\n<li>输入输出设备</li>\n</ul>\n<p><strong>存储</strong>，它负责存放计算涉及的相关数据，作为计算的输入参数和输出结果。常见的<strong>存储设备</strong>非常多样化，比如：中央处理器内置的寄存器、内存、传统机械硬盘、USB 固态硬盘等等。</p>\n<p>从中央处理器的角度，存储见到那分为两类：</p>\n<ul>\n<li>内置支持的存储（常规的处理器指令可直接访问），比如寄存器、内存、计算机主板的 ROM。</li>\n<li>外置存储（中央处理器本身并不能直接读写其中的数据），输入输出设备。</li>\n</ul>\n<p><strong>冯·诺依曼体系涉及的“存储”，指的是中央处理器内置支持的存储</strong>。</p>\n<p><strong>输入输出设备</strong>，每个设备通过一个端口与中央处理器连接。通过这个端口地址，中央处理器可以和设备进行数据交换。</p>\n<p>数据交换设计的数据格式由设备定义，中央处理器并不理解。设备数据交换的发起方（设备使用方）通常理解并可以解释所接收的数据含义。为了方便使用，设备厂商或操作系统厂商通常会提供设备相关的驱动程序，把设备交换的细节隐藏起来，设备的使用方只需要调用相关的接口函数就可以操作设备。</p>\n<p><strong>中央处理器</strong>，它负责程序（指令序列）的执行。指令序列也存放在存储里面，计算机加电启动后，中央处理器会从一个固定的存储地址开始执行。通常这个固定的存储地址指向计算机主板的 ROM 上的一段启动程序（BIOS），这段启动程序通常包含以下内容：</p>\n<ul>\n<li>存储设备的驱动程序，用以识别常规的外置存储设备，比如硬盘、光驱、U 盘；</li>\n<li>基础外部设备的驱动程序，比如键盘、鼠标、显示器（显卡）；</li>\n<li>设备和启动配置的基础管理能力；</li>\n<li>在外置存储上执行程序的能力；</li>\n<li>将执行权转移到外置存储上的操作系统启动程序，这样操作系统就开始干活了。</li>\n</ul>\n<p><strong>“计算”需求的多样性只需要通过调整计算机主板上的 BIOS 程序，乃至外置存储中的操作系统启动程序就可以实现了，而不必去修改中央处理器本身</strong>。</p>\n<p>中央处理器支持的指令分类：</p>\n<ul>\n<li>计算类，各类数学运算；</li>\n<li>I/O 类，从存储读写数据，从输入输出设备读写数据；</li>\n<li>指令跳转类，在满足特定条件下跳转到新的当前程序执行位置、调用自定义函数。</li>\n</ul>\n<p>和“解决一切可以用‘计算’来解决的问题”这个伟大的目标相比，冯·诺依曼体系的三类零部件的规格设计显得如此精简。</p>\n<blockquote>\n<p>为什么这么简洁的规格设计，居然可以解决这么复杂的需求？</p>\n</blockquote>\n<h2 id=\"需求是怎么被满足的？\">需求是怎么被满足的？<a href=\"post/framework-von-neumann#需求是怎么被满足的？\"></a></h2><p>对于“解决一切可以用‘计算’来解决的问题”这样一个模糊的需求，如果你是“电脑”这个产品的主架构师，你会如何应对？</p>\n<p>分析思路如下：</p>\n<p>一方面，需求的变化点在于，要解决的问题是五花八门包罗万象的。如何以某种稳定但可扩展的架构来支持这样的变化呢？</p>\n<p>另一方面，需求的稳定点在于，电脑的核心能力是固定的，怎么表达电脑的核心能力？</p>\n<p>电脑的核心能力是“计算”。</p>\n<p>什么是计算？计算就是对一个数据（输入）进行变换，变为另一个数据（输出）。在数学中把它叫作“函数”。</p>\n<p><code>y = f(x)</code></p>\n<p>x、y 是数据，可以是简单的数值，也可能是文本、图片、视频，各种我们对现实问题进行参数化建模后的测量值，当然也可能是多个输入数据。但无论它的逻辑含义是什么，物理上都可以以一段连续的字节内容来表达。</p>\n<p>x、y 物理上在哪里？</p>\n<p>“存储”这个概念就产生了。存储就是存放计算所要操作数据的所在。</p>\n<p>一个具体的计算（函数）怎么表达？</p>\n<p>计算（函数）对于电脑的架构师来说是未知的，那么怎么设计一种系统架构让用户可以表达任意复杂的计算（函数）？</p>\n<p>逻辑上来看，无论多么复杂的自定义函数，都可以通过下面这些元素的组合来定义：</p>\n<ul>\n<li>内置函数，整数或小数运算</li>\n<li>循环和条件分支</li>\n<li>子函数（自定义函数） </li>\n</ul>\n<p>因此，<strong>对于任意的具体的计算（自定义函数）来说，都可以用一组指令序列来表达</strong>。</p>\n<p>那么函数物理上在哪里？</p>\n<p>函数以指令序列形式存放在存储里面。也就是说，存储不只存放计算索要操作的数据，也存放“计算”本身。</p>\n<p>只是，存储里面存放的“计算”只是数据，需要有人理解并执行这些数据背后的计算行为，才变成真正意义的“计算”。这个执行者，就是中央处理器（CPU），它支持很多计算指令，包括执行内置函数、循环和条件分支、执行子函数等。</p>\n<div class=\"article-img\"><p><img src=\"https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/framework-von1.png?raw=true\" alt=\"中央处理器+存储\" data-zoomable></p></div>\n<p>电脑有了“中央处理器+存储”，即有了计算的能力和计算的数据，但无法和现实世界发生交互。</p>\n<p><strong>交互，抽象来看就是输入和输出</strong>。对于电脑来说，输入和输出的需求多样化。</p>\n<p>从输入需求来说，可能采集静态图像、声音、视频；也可能采集结构化的数据，如 GPS 位置、脉搏、心电图、温度、湿度等；还可能是用户控制指令，如键盘按键、鼠标、触摸屏动作等。</p>\n<p>从输出需求来说，可能像屏幕输出信息；播放声音；执行某个动作如交通灯开关、打印机打印等。</p>\n<p>不管是什么样交互用途的设备，我们要做的只是定义好统一的数据交换协议？</p>\n<p>因此中央处理器不仅要有“计算”能力，还要有“数据交换”能力（IO 能力）。</p>\n<div class=\"article-img\"><p><img src=\"https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/framework-von2.png?raw=true\" alt=\"中央处理器+存储+输入输出设备\" data-zoomable></p></div>\n<p>输入输出设备从根本上解决了什么问题？</p>\n<p>是电脑无限扩展的能力。最重要的是，输入输出设备和电脑是完全异构的。输入输出设备对电脑来说就只是实现了某项功能的黑匣子。如果把交互能力也看作是一种计算能力的话，电脑理论上能够解决的“计算”问题变得无所不包。</p>\n<h2 id=\"内容总结\">内容总结<a href=\"post/framework-von-neumann#内容总结\"></a></h2><p>架构的第一步是<strong>需求分析</strong>，从需求分析角度来说，关键要抓住需求的<strong>稳定点</strong>和<strong>变化点</strong>。需求的稳定点，往往是系统的核心价值点；而需求的变化点，则往往需要相应去做开放性设计。</p>\n<p>对于电脑这个产品来说，需求的稳定点是电脑的 <strong>“计算”能力</strong> ，需求的变化点，一是用户 <strong>“计算”需求</strong> 的多样性，二是<strong>用户交互方式</strong>的多样性。</p>\n<p>电脑的“计算”能力，最终体现为中央处理器的指令集，这是需求相对稳定的部分。</p>\n<p>用户“计算”需求的多样性，只需要通过调整计算机主板上的 BIOS 程序，乃至外置存储中的操作系统启动程序来实现，而不必去修改中央处理器本身。</p>\n<p>用户交互方式的多样性，则通过定义外部设备与中央处理器的数据交换协议实现。</p>\n<p><strong>分析需求的稳定点和变化点</strong></p>\n<p>描述需求需要几个典型的要素：</p>\n<ol>\n<li>用户，面向的人群；</li>\n<li>他们有什么要解决的问题；</li>\n<li>解决这个问题的核心系统</li>\n</ol>\n<p>只有满足了上面几个要素的需求才能进一步讨论变化点和稳定点。</p>\n<p><strong>存储让数据跨越时间，传输让数据跨越空间，计算让数据改变形式。</strong></p>\n","next":{"title":"最好/最坏/平均/均摊时间复杂度分析","slug":"complexity-analysis2"},"link":"http://yoursite.com/post/framework-von-neumann/","toc":[{"title":"分析架构的关键点","id":"分析架构的关键点","index":"1","children":[{"title":"需求","id":"需求","index":"1.1"},{"title":"规格","id":"规格","index":"1.2"}]},{"title":"冯·诺依曼体系结构分析","id":"冯·诺依曼体系结构分析","index":"2"},{"title":"需求是怎么被满足的？","id":"需求是怎么被满足的？","index":"3"},{"title":"内容总结","id":"内容总结","index":"4"}],"reward":false}