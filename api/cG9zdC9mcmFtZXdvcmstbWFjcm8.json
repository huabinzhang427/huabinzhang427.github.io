{"title":"架构设计的宏观视角","date":"2019-05-05T03:22:58.000Z","thumbnail":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1557058401222&di=46de0116dc64fdfd2ce0b0b70c9bf7d7&imgtype=0&src=http%3A%2F%2Fimg.mp.itc.cn%2Fq_mini%2Cc_zoom%2Cw_640%2Fupload%2F20170329%2Fe24c0b68fb374b7786488970a80deace_th.jpeg","slug":"framework-macro","tags":["摘录","架构设计"],"updated":"2019-05-05T11:57:04.684Z","content":"<p>现在包罗万象的信息世界，正是在最底层的冯·诺依曼的基础体系上搭建而成，我们熟知的架构，则是最上层的业务架构。</p>\n<a id=\"more\"></a>\n<h2 id=\"应用程序的基础架构\">应用程序的基础架构<a href=\"post/framework-macro#应用程序的基础架构\"></a></h2><h3 id=\"电脑的工作原理\">电脑的工作原理<a href=\"post/framework-macro#电脑的工作原理\"></a></h3><p>所有的电脑都可以统一看作由”<strong>中央处理器 + 存储 + 一系列的输入输出设备</strong>“构成。</p>\n<ul>\n<li><code>中央处理器</code>（CPU）：负责按指令执行命令；</li>\n<li><code>存储</code>：负责保存数据，包括我们要执行的指令（以数据的形式保存在存储中）。</li>\n</ul>\n<blockquote>\n<p>为什么电脑能够完成这么多复杂而多样化的工作？</p>\n</blockquote>\n<p>整个过程依赖以下两点：</p>\n<p><strong>可编程性</strong>。CPU 指令是一个有限的指令集（计算类、I/O类、指令跳转类），但是 CPU 执行的指令序列（程序）并不是固定的，而是依赖保存在存储中的数据（程序员编写的软件）来决定的。指令序列的可能性是无穷的，这就意味着电脑能够做的事情也是无穷的。</p>\n<p><strong>开放设计的外部设备支持</strong>。CPU 并不理解外部设备（键盘、打印机、屏幕等等）具体有什么样的能力，它只和这些设备交换数据。</p>\n<p><strong>电脑的 CPU 是一个非常简洁的模型，它只读入和写出数据，对数据进行计算。</strong></p>\n<h3 id=\"程序的运行原理\">程序的运行原理<a href=\"post/framework-macro#程序的运行原理\"></a></h3><p>有了上面基础的计算机体系，接下来我们就可以编写软件了。</p>\n<p><strong>编程语言+编译器</strong> 的出现。编译器负责把我们人类容易理解的语言，转换为机器可以理解的机器指令。</p>\n<blockquote>\n<p>多个软件在同一个电脑上怎么共处？</p>\n</blockquote>\n<p>多个软件大家往同一个存储地址写数据冲突？一起往打印机发送指令怎么办？等等</p>\n<p><strong>操作系统</strong> 就出现了。它首先要解决的是软件治理的问题，包括建立安全保护机制和建立软件之间的协作秩序；其次解决的是基础编程接口的问题，一方面简化了软件开发，另一方面提供了多软件共存（多任务）的环境。</p>\n<p>像上面所说的冯·诺依曼计算机体系、操作系统和编程语言，这些都是我们开发一个应用程序所依赖的<strong>基础架构</strong>。基础架构解决的是与业务无关的一些通用性的问题。而且，基础架构通常以独立的软件存在，所以也成为<strong>基础软件</strong>。</p>\n<p>Linux、Nginx、MySQL、PHP 等这些软件都属于基础软件，这些基础软件极大的降低了应用开发的难度。在今天<strong>软件服务化</strong>的大趋势下，很多基础软件最终以互联网服务的方式提供，这就是所谓的“<strong>云计算</strong>”。</p>\n<h2 id=\"应用程序的业务架构（应用架构）\">应用程序的业务架构（应用架构）<a href=\"post/framework-macro#应用程序的业务架构（应用架构）\"></a></h2><p>业务架构虽然会因为应用的领域不同而有很大的差异，但不同业务架构之间，仍然会有许多共通的地方。它们不止遵循相同的<strong>架构原则</strong>，还可以遵循相同的<strong>设计范示</strong>（交互领域-MVC、JS-Angular 等）。</p>\n<h2 id=\"完整的程序架构\">完整的程序架构<a href=\"post/framework-macro#完整的程序架构\"></a></h2><p><strong>服务端</strong> 应用程序完整的程序架构</p>\n<div class=\"article-img\"><p><img src=\"https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/framework-server.jpg?raw=true\" alt=\"服务端\" data-zoomable></p></div>\n<p><strong>客户端</strong> 应用程序完整的程序架构</p>\n<div class=\"article-img\"><p><img src=\"https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/framework-client.png?raw=true\" alt=\"客户端\" data-zoomable></p></div>\n<h2 id=\"总结\">总结<a href=\"post/framework-macro#总结\"></a></h2><div class=\"article-img\"><p><img src=\"https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/framework-xsw.png?raw=true\" alt=\"思维导图\" data-zoomable></p></div>\n","link":"http://yoursite.com/post/framework-macro/","toc":[{"title":"应用程序的基础架构","id":"应用程序的基础架构","index":"1","children":[{"title":"电脑的工作原理","id":"电脑的工作原理","index":"1.1"},{"title":"程序的运行原理","id":"程序的运行原理","index":"1.2"}]},{"title":"应用程序的业务架构（应用架构）","id":"应用程序的业务架构（应用架构）","index":"2"},{"title":"完整的程序架构","id":"完整的程序架构","index":"3"},{"title":"总结","id":"总结","index":"4"}],"reward":false}