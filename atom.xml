<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张华宾的博客</title>
  
  <subtitle>先博而后渊</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-24T15:28:05.913Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ZhangHuaBin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>软件运行机制与内存管理</title>
    <link href="http://yoursite.com/post/software-operation-memory-management/"/>
    <id>http://yoursite.com/post/software-operation-memory-management/</id>
    <published>2019-05-24T08:29:05.000Z</published>
    <updated>2019-05-24T15:28:05.913Z</updated>
    
    <content type="html"><![CDATA[<p>计算机是如何运行外置存储上的软件的？这和“内存管理”有关。</p><a id="more"></a><p>操作系统的核心功能是软件治理，而软件治理的一个很重要的部分，就是让多个软件可以共同合理使用计算机的资源，不至于出现争抢的局面。</p><p>内存作为计算机最基础的硬件资源，有着非常特殊的位置。CPU 可以直接访问的存储资源非常少，只有：寄存器、内存（RAM）、主板上的 ROM。</p><p><strong>寄存器</strong>的<strong>访问速度非常非常快，但是数量很少</strong>，大部分程序员不直接打交道，而是由编程语言的编译器根据需要自动选择寄存器来优化程序的运行性能。</p><p><strong>主板上的 ROM</strong> 是非易失的只读的存储，所谓<strong>非易失</strong>，是计算机重新启动后它里面的数据仍然会存在，这不像内存（RAM），计算机重新启动后它上面的数据就丢失了。ROM 非易失和只读的特点，决定了它非常适合存储计算机的启动程序（BIOS）。</p><p><strong>内存（RAM）</strong> 的地位非常特殊，它是唯一的 <strong>CPU 内置支持</strong>，且<strong>和程序直接打交道</strong>的基础资源。</p><p>内存的两个作用：</p><ul><li>作为“计算”的操作对象，输入和输出数据存放地所在；</li><li>存放“计算”本身，也就是程序员写的程序</li></ul><h2 id="计算机运行的全过程">计算机运行的全过程<a href="post/software-operation-memory-management#计算机运行的全过程"></a></h2><p>从 CPU 角度来看，“计算”过程从计算机加电启动，执行 BIOS 程序的第一条指令开始，到最后计算机关机，整个就是一个完整的“计算”过程。</p><p>从操作系统的视角来看，计算机从开机到关机，整个“计算”过程，由很多软件（子“计算”过程）共同完成。从时序来说，计算机完整的“计算”过程如下：</p><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/memory-management1.png?raw=true" alt="c/c++-基本数据类型数组" data-zoomable></p></div><p>首先，<strong>BIOS 程序</strong>没有固化在 CPU 中，而是<strong>独立放到主板的 ROM 上</strong>，是因为不同历史时期的计算机输入输出设备很不一样，有键盘+鼠标+显示器的、有触摸屏的、也有纯语音交互的，外置存储则有软盘、硬盘、闪存，这些变化我们可以通过调整 BIOS 程序来应对，而不需要修改 CPU。</p><p><strong>引导区引导程序</strong>，则是程序从内置存储（ROM）转到外置存储的边界。引导区引导程序很短，BIOS 只需要把它加载到内存执行就可以，但是这样系统的控制权就很巧妙地转到了外置存储了。它不固化在 BIOS 中，而是<strong>写在外置存储的引导区</strong>，是为了避免 BIOS 程序需要经常性修改。毕竟 BIOS 还是硬件，而引导区引导程序已经属于软件范畴了，修改起来会方便很多。</p><p><strong>OS （操作系统）引导程序</strong>，则是外置存储接手计算机控制权的真正开始，操作系统从这里开始干活了。这个过程发生了很多事情，但是最终所有的初始化工作完成后，操作系统会把执行权交给 OS Shell 程序。</p><p><strong>OS Shell 程序负责操作系统与用户的交互</strong>。最早期，计算机的交互界面是字符界面，OS Shell 程序是一个命令行程序。DOS　中叫　<code>command.com</code>，Linux 下则叫 <code>sh</code> 或者 <code>bash</code> 之类。这个时候启动一个软件的方式就是在 命令行终端输入一个命令行，命令行终端负责解释命令理解用户的意图，然后启动相应的软件。到了图形界面时期，在 Sheel 中启动软件变成了点点鼠标，或者动动手指（触摸屏）就行了，交互范式简化了很多。</p><h2 id="内存管理">内存管理<a href="post/software-operation-memory-management#内存管理"></a></h2><blockquote><p>计算机是如何运行外置存储上的软件的？</p></blockquote><ul><li>如何分配内存（给运行中的软件，避免它们发生资源争抢）；</li><li>如何运行外置存储（比如硬盘）上的软件。</li></ul><blockquote><p>如何运行软件？</p></blockquote><h3 id="CPU-的实模式和保护模式">CPU 的实模式和保护模式<a href="post/software-operation-memory-management#CPU-的实模式和保护模式"></a></h3><p>CPU 的实模式和保护模式，这两个模式 CPU 对内存的操作方式完全不同。在实模式下，CPU 直接通过物理地址访问内存。在保护模式下，CPU 通过一个地址映射表把虚拟的内存地址转为物理的内存地址，然后再去读取数据。</p><p>相应的，工作在实模式下的操作系统，我们叫做<strong>实模式操作系统</strong>；工作在保护模式下的操作系统，我们叫做<strong>保护模式操作系统</strong>。</p><h4 id="实模式下的内存管理">实模式下的内存管理<a href="post/software-operation-memory-management#实模式下的内存管理"></a></h4><p>在实模式操作系统下，所有软件包括操作系统本身，都在同一个物理地址空间下。在 CPU 看来，它们是同一个程序。操作系统如何分配内存？</p><ol><li>把操作系统内存管理相关的函数地址，放到一个大家公认的地方，每个软件要想申请内存就到这个地方取得内存管理函数并调用它；</li><li>把内存管理功能设计为一个中断请求。所谓中断，是 CPU 响应硬件设备事件的一个机制。当某个输入输出设备发生了一件需要 CPU 来处理的事情，他就会触发一个中断。</li></ol><p>上面两种方法实质上是同一个方法，只是机制细节有所不同而已。</p><p>操作系统如何运行外置存储（硬盘）上的软件？</p><p>就是把软件完整从外置存储读入到内存然后执行它。</p><p>整体来说，实模式内存管理的机制实质上是一个程序被拆分为很多个软件（程序代码片段），实现了程序代码片段的动态加载。</p><h4 id="保护模式下的内存管理">保护模式下的内存管理<a href="post/software-operation-memory-management#保护模式下的内存管理"></a></h4><p>一方面，软件越复杂，它的程序代码量就越多，需要的存储空间越大，甚至可能出现单个软件的大小超过计算机的可用内存，这时在实模式下就没法执行它。</p><p>另一方面，哪怕单个软件可运行，但是一旦我们同时运行的软件多几个，操作系统对内存的需求量就会急剧增加，相比这么多软件加起来的内存需求量，内存的存储空间往往仍然是不足的。</p><p><strong>保护模式下，内存访问不再是直接通过物理内存，而是基于虚拟内存。虚拟内存模式下，整个内存空间被分成很多个连续的内存页。买个内存页大小是固定的，比如 64k</strong>。</p><p>每次 CPU 访问某个虚拟内存地址中的数据，它都会先计算出这是要访问哪个内存页，然后 CPU 再通过一个地址映射表，把虚拟的内存地址转为物理的内存地址，然后到这个物理内存地址去读取数据。</p><p>当然，也有可能某一个内存页对应的物理内存地址还不存在，这种情况叫缺页，没法读取数据，这时 CPU 就会发起一个缺页的中断请求。</p><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/memory-management2.png?raw=true" alt="c/c++-基本数据类型数组" data-zoomable></p></div><p>这个缺页的中断请求会被操作系统接管，发生缺页时，操作系统会为这个内存页分配物理的内存，并恢复这个内存页的数据。如果没有空闲的物理内存可以分配，它就会选择一个最久没有被访问的内存页进行淘汰。淘汰前会把这个内存页的数据保存起来，因为下次 CPU　访问这个被淘汰的内存页时一样会发生缺页中断请求那时操作系统还要去回复数据。</p><p><strong>通过虚拟内存的机制，操作系统并不需要一上来就把整个如啊你就按装进内存中，而是通过缺页中断按需加载对应的程序代码片段。多个软件同时运行的问题也就解决了，内存不够用的时候，就把最久没有用过的内存页淘汰掉，腾出物理内存来。</strong></p><blockquote><p>操作系统如何分配内存给运行中的软件？</p></blockquote><p>内存分配不需要额外的机制，通过<strong>虚拟内存以及缺页机制</strong>，操作系统可以一上来就给要运行的软件分配超级大的内存，软件如果不用那个内存页，什么都不发生，一旦用了某个内存页，通过缺页中断，操作系统就分配真正的物理内存给它。</p><p>每个运行的软件（进程），都有自己的地址映射表，也就是说，虚拟地址并不是全局的，而是每个进程有一个自己独立的虚拟地址空间。</p><p>在实模式下，所有进程都在同一物理内存的地址空间里，它们相互可以访问对方的数据，修改甚至破坏对方的数据，进而导致其它进程（包括操作系统本身的进程）奔溃。内存是进程运行的基础资源，保持进程基础资源的独立性，是软件治理的最基础的要求，这也是保护模式之所以叫“保护”模式的原因。</p><h2 id="架构思维">架构思维<a href="post/software-operation-memory-management#架构思维"></a></h2><p>虚拟内存本质上要解决的两个核心的需求：</p><ol><li><p>软件越来越大，我们需要考虑在外置存储上执行指令，而不是完整加载到内存中。但是外置存储一方面它的数据 CPU 并不知道怎么读；另一方面就算知道怎么读，也不知道它的数据格式是什么样的，这依赖文件系统的设计。让 CPU 理解外置存储的实现细节？</p></li><li><p>要同时运行的软件越来越多，计算机内存的供给与软件运行的内存需求相比，捉襟见肘。怎么才能把有限的内存的使用效率最大化？一个很容易想到的思路是把不经常使用的内存数据交换到外置存储。但是 CPU 并不了解外置存储的实现细节，怎么才能把内存按需交换出去？</p></li></ol><p>通过把虚拟内存地址分页，引入缺页中断（很像是 CPU 留给操作系统的回调函数），通过它对变化点实现了很好的开放性设计。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;计算机是如何运行外置存储上的软件的？这和“内存管理”有关。&lt;/p&gt;
    
    </summary>
    
    
      <category term="摘录" scheme="http://yoursite.com/tags/%E6%91%98%E5%BD%95/"/>
    
      <category term="架构设计" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>操作系统的需求和演变</title>
    <link href="http://yoursite.com/post/operating-sysytem/"/>
    <id>http://yoursite.com/post/operating-sysytem/</id>
    <published>2019-05-24T02:07:04.000Z</published>
    <updated>2019-05-24T06:26:42.192Z</updated>
    
    <content type="html"><![CDATA[<p>“操作系统”是刚性需求，核心的流量入口，兵家必争之地。所以，围绕它的核心能力，操作系统必然会不断演化出新的形态。</p><a id="more"></a><h2 id="软件治理的需求">软件治理的需求<a href="post/operating-sysytem#软件治理的需求"></a></h2><p>编程语言出现后，软件的生产效率得到大幅度提升，随着越来越多软件的出现，自然而然就诞生了多个软件如何共处？也就是软件治理的需求。比如下面的需求场景：</p><ul><li>多个软件如何同时运行（多任务的需求）？</li><li>多个软件如何共同使用计算机上的存储空间（内存管理、文件系统的需求）？</li><li>多个软件如何共同使用同一个外部设备（设备管理的需求）？</li><li>多个软件如何相互通讯，如何进行数据交换（进程间通讯、共享内存的需求）？</li><li>病毒、恶意软件如何治理（安全管理的需求）？</li></ul><p>如果没有一个中间的协调方，软件与软件之间并不知道彼此的存在，这种没有统一规则约束下的场面，会很凌乱，于是，操作系统就出现了。<strong>对于软件而言，它像一个大法官，制定规则并据此约束“大家”的行为</strong>。</p><h2 id="操作系统的启动过程">操作系统的启动过程<a href="post/operating-sysytem#操作系统的启动过程"></a></h2><blockquote><p>操作系统是怎么获得执行权的？</p></blockquote><p>这是计算机主板 ROM 上的启动程序（BIOS）交给它的。</p><p>过程：</p><p>计算机加电启动后，中央处理器（CPU）会从一个固定的存储地址加载指令序列执行。通常，这个固定的存储地址指向计算机主板的 ROM 上的一段启动程序（BIOS）。这段启动程序包含以下内容：</p><ul><li>存储设备的驱动程序，用以识别常规的外置存储设备，比如硬盘、光驱、U盘；</li><li>基础外部设备的驱动程序，比如键盘、鼠标、显示器；</li><li>设备和启动配置的基础管理能力；</li><li>支持执行外置存储中引导区的机器代码程序；</li><li>跳转到外置存储引导区的固定地址，把执行权交给该地址上的引导程序。</li></ul><p>引导区的引导程序有长度限制，只能做非常少的事情。在常规情况下，它只是简单地跳转到真正的操作系统的启动程序，但有时计算机上安装了多个操作系统，此时引导程序会提供菜单让你选择要运行的操作系统。这样，操作系统就开始干活了。</p><h2 id="操作系统的需求演进">操作系统的需求演进<a href="post/operating-sysytem#操作系统的需求演进"></a></h2><h3 id="操作系统的发展历程">操作系统的发展历程<a href="post/operating-sysytem#操作系统的发展历程"></a></h3><p>早期计算机是大型机，主要使用人群是搞科研性质的科学家或其他高端人群。这个时期的计算机还是单任务，以计算为主，软件为操作系统服务。如果“软件治理”是操作系统的根源需求，那么可以认为这个时期还不存在操作系统。</p><p>此后，小型机和个人计算机（PC）的崛起，分别诞生了 UNIX 和 DOS 这两个影响深远的操作系统。UNIX 几乎算得上是今天所有现代操作系统的鼻祖。</p><p>微软通过推动 PC 机的发展，让操作系统不再依赖特定的硬件设备。微软也就因此脱离 IBM 的臂膀，自己一飞冲天了。</p><h3 id="操作系统在做什么">操作系统在做什么<a href="post/operating-sysytem#操作系统在做什么"></a></h3><p>从<strong>客户价值</strong>和<strong>商业价值</strong>两个维度来看：</p><p>客户价值</p><p><strong>操作系统首先要解决的是软件治理的问题</strong>，大体分为以下六个子系统：</p><ul><li>进程管理</li><li>存储管理</li><li>输入设备管理</li><li>输出设备管理</li><li>网络管理</li><li>安全管理</li></ul><p>其次操作系统解决的是<strong>基础编程接口问题</strong>。这些编程接口一方面简化了软件的开发，另一方面提供了多软件共同运行的环境，实现了软件治理。</p><p>商业价值</p><p><strong>操作系统是基础的刚需软件</strong>。计算机离开了操作系统就是一堆废铜烂铁。</p><p>虽然第一个广为人知的操作系统是 NUIX，但从商业上来说最成功的操作系统是 DOS/Windows，成就了微软的霸主地位。UNIX 走的是企业市场，而 DOS/Windows 选择了更为巨大的市场：个人计算机（PC）市场。</p><p>操作系统也是<strong>核心的流量入口</strong>，占领了操作系统，就占有了用用户。浏览器是另一个软件治理的入口，本质上是操作系统之上的操作系统。如果软件都运行在浏览器上，那么本地操作系统就沦为和硬件一般无二的管道了。</p><p>应用市场实现了应用的分发，既解决了系统能力的无限扩展问题（客户价值），也解决了预装软件个数总归有限的问题（商业价值）。支付则是收税模式的承载体，无论是下载应用收费，还是应用内购买内容收费，都可以通过这个关卡取收税。</p><p><strong>无论是本地操作系统 IOS 和 Android，还是 Web 操作系统（浏览器）如微信小程序，都实现了“账号-支付-应用市场”这样的商业闭环。这类操作系统，卡伊把它叫做现代操作系统</strong>。</p><h2 id="操作系统的边界">操作系统的边界<a href="post/operating-sysytem#操作系统的边界"></a></h2><blockquote><p>操作系统的边界在哪里？</p></blockquote><ul><li>硬件（个人计算机、手机或其它）；</li><li>操作系统；</li><li>浏览器。</li></ul><p>问题在于，操作系统、浏览器和（互联网）搜索引擎的关系是什么？移动时代的浏览器会是什么样的？它和操作系统的关系又如何相处？</p><p><strong>操作系统和硬件的关系</strong>，微软虽然占据了 PC 操作系统（DOS/Windows）绝大部分江山，但是它自身并不生产硬件。<strong>PC 兼容机</strong>的发展对 DOS/Windows 的发展有着直观重要的支撑意义，它让操作系统厂商有了独立的生存空间。</p><p>iOS 操作系统引入的“账号-支付-应用是市场”的收税模式，受益方是硬件（手机）厂商，而非操作系统厂商。</p><p>Android 系统是免费的，Google 并没有从中收取软件许可费用，而是借助 Android 的市场占有率来推动 Google 的服务，通过 Google 服务来获取商业回报。</p><p>Google 和 Android 手机厂商之间的联盟并不可靠，养肥的手机厂商会不断试探 Google 的底线，而 Google 也会尝试去收紧政策，双方在博弈中达到平衡。</p><p>人们对操作系统的重要性认知已经非常充分，所以大部分手机厂商，都不会放弃<strong>操作系统的核心子系统的主控权</strong>。同时，手机是个性化产品，硬件上并没有 PC 那么标准化，所以个人计算机有兼容机，而手机并没有所谓的标准化硬件。</p><p><strong>操作系统和浏览器的关系</strong>，在 PC 时期，操作系统是以管理本地软件和内容为主（对内）。浏览器，是以管理互联网内容为主（对外）。但现在这个边界变得越来越模糊。应用市场是典型的互联网内容，在浏览器的生态里，网站导航、搜索引擎、Web 应用市场。它们共同构成了互联网世界的“地图”。</p><h2 id="内容总结">内容总结<a href="post/operating-sysytem#内容总结"></a></h2><blockquote><p>操作系统是做什么的？</p></blockquote><ul><li>从客户价值来说，它需要实现软件治理，让多个软件和谐共处；提供基础的编程接口，降低软件开发难度。</li><li>从商业价值来说，操作系统是刚性需求，核心的流量入口，兵家必争之地。所以，围绕它的核心能力，操作系统必然会不断演化出新的形态。</li></ul><p>我们把引入了 “账号-支付-应用市场”商业闭环的收税模式的操作系统，称为现代操作系统。</p><blockquote><p>操作系统的边界在哪里？</p></blockquote><p>分析硬件、操作系统、浏览器三者的关系，对需求发展做出预判。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“操作系统”是刚性需求，核心的流量入口，兵家必争之地。所以，围绕它的核心能力，操作系统必然会不断演化出新的形态。&lt;/p&gt;
    
    </summary>
    
    
      <category term="摘录" scheme="http://yoursite.com/tags/%E6%91%98%E5%BD%95/"/>
    
      <category term="架构设计" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>数据结构中数组与编程语言中数组的关系</title>
    <link href="http://yoursite.com/post/array-differ/"/>
    <id>http://yoursite.com/post/array-differ/</id>
    <published>2019-05-23T07:24:45.000Z</published>
    <updated>2019-05-23T09:50:53.993Z</updated>
    
    <content type="html"><![CDATA[<p>数据结构与算法中的“数组”与编程语言中的“数组”，它们并不完全等同。编程语言在实现自己的“数组”类型的时候，并不是完全遵循数据结构“数组”的定义，而是针对编程语言自身的特点，做了调整。</p><a id="more"></a><p>数据结构与算法中的数组概念是这样定义的：数组是存储相同数据类型的一块连续的存储空间。也就是，数组中的数据必须是相同类型的，数组中的数据必须是连续存储的。只有这样，数组才能实现根据下标快速地（时间复杂度是 O(1)）定位一个元素。</p><p>在不同的编程语言中，数组这种数据类型的实现方式都不大相同，比如下面的 C/C++、Java、Javascript</p><h2 id="C-C-中数组的实现方式">C/C++ 中数组的实现方式<a href="post/array-differ#C-C-中数组的实现方式"></a></h2><p><strong>C/C++ 中的数组，是非常标准的数据结构中的数组，也就是连续存储相同类型的数据的一块内存空间</strong>。</p><p>在 C/C++ 中，不管是基本类型数据，比如 int、long、char，还是结构体、对象，在数组中都是连续存储的。</p><ul><li>基本数据类型数组</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/array-c1.png?raw=true" alt="c/c++-基本数据类型数组" data-zoomable></p></div><p>数组 arr 中存储的是 int 基本类型的数据，对应的内存存储方式。从图中可以看出，数据是存储在一片连续的内存空间中。</p><ul><li>结构体（class 对象）数组</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dog</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dog</span> <span class="title">arr</span>[3];</span></span><br><span class="line"></span><br><span class="line">arr[<span class="number">0</span>].a = <span class="string">'0'</span>;</span><br><span class="line">arr[<span class="number">0</span>].b = <span class="string">'1'</span>;</span><br><span class="line">arr[<span class="number">1</span>].a = <span class="string">'2'</span>;</span><br><span class="line">arr[<span class="number">1</span>].b = <span class="string">'3'</span>;</span><br><span class="line">arr[<span class="number">2</span>].a = <span class="string">'4'</span>;</span><br><span class="line">arr[<span class="number">2</span>].b = <span class="string">'5'</span>;</span><br></pre></td></tr></table></figure><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/array-c2.png?raw=true" alt="c/c++-结构体（class 对象）数组" data-zoomable></p></div><p>结构体数组中的元素，也是存储在一片连续的内存空间中。</p><ul><li>二维数组（或多维数组）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dog</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dog</span> <span class="title">arr</span>[3][2];</span></span><br></pre></td></tr></table></figure><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/array-c3.png?raw=true" alt="c/c++-二维数组（或多维数组）" data-zoomable></p></div><p>和数据结构中二维数组是一样的，<strong>数据先按行后按列，并且是连续存储的</strong>。</p><p><strong>C/C++ 中数组的数据存储方式，完全符合数据结构和算法中数组的定义</strong>。</p><h2 id="Java-中数组的实现方式">Java 中数组的实现方式<a href="post/array-differ#Java-中数组的实现方式"></a></h2><ul><li>基本数据类型数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/array-java1.png?raw=true" alt="java-基本数据类型数组" data-zoomable></p></div><p>注意，new 申请的空间在堆上，arr 存储在栈上。arr 存储的是数组空间的首地址。</p><p>在 java 中，基本数据类型数组还是符合数据结构中数组的定义的。数组中数据是相同类型的、并且存储在一片连续的内存空间中。</p><ul><li>class 对象数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person arr[] = <span class="keyword">new</span> Person[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> Person(<span class="string">'0'</span>);</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> Person(<span class="string">'1'</span>);</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> Person(<span class="string">'2'</span>);</span><br></pre></td></tr></table></figure><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/array-java2.png?raw=true" alt="java-class 对象数组" data-zoomable></p></div><p>在 Java 中，对象数组存储的是对象在内存中的地址，而非对象本身。对象本身在内存中并不是连续存储的，而是散落在各个地方。</p><ul><li>二维数组（或多维数组）</li></ul><p>二维数组（或多维数组）存储基本数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/array-java3.png?raw=true" alt="java-二维数组（或多维数组）存储基本数据类型" data-zoomable></p></div><p><strong>在 java 中，二维数组中的第二维，可以是不同长度的</strong>。</p><p>二维数组（或多维数组）存储对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Person arr[] = <span class="keyword">new</span> Person[<span class="number">3</span>][];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> Person[<span class="number">1</span>];</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> Person[<span class="number">2</span>];</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> Person[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">new</span> Person(<span class="string">'0'</span>);</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">1</span>] = <span class="keyword">new</span> Person(<span class="string">'1'</span>);</span><br></pre></td></tr></table></figure><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/array-java4.png?raw=true" alt="java-二维数组（或多维数组）存储对象" data-zoomable></p></div><p><strong>在 Java 编程语言中，数组这种数据类型，除了存储基本类型的一维数组之外，对象数组、二维数组都和数据结构中数组的定义有很大的区别</strong>。</p><h2 id="Javascript-中数组的实现方式">Javascript 中数组的实现方式<a href="post/array-differ#Javascript-中数组的实现方式"></a></h2><p><strong>JavaScript 中的数组，可以存储不同类型的数据，数组中的数据也不一定是连续存储的（按照下标随机访问的效率不高），并且还能支持变长数组</strong>。</p><p><strong>实际上，Javascript 中的数组，会根据我们存储数据的不同，选择不同的实现方式</strong>。如果数组中存储的是相同类型的数据，那 JavaScript 就用数据结构中数组来实现，也就是说，会分配一块连续的内存空间来存储数据。如果数组中存储的是非相同类型的数据，那 JavaScript 就用类似于<strong>散列表</strong>的结构来存储数据。也就是说，数据并不是连续存储在内存中的。这也是 JavaScript 数组支持存储不同类型数据的原因。</p><p>如果我们从一个存储了相同类型数据的数组中，插入一个不同类型的数据，那 JavaScript 会将底层的数据结构，从数组变成散列表。</p><p>JavaScript 为了照顾一些底层应用的开发者，提供了另一种数据类型 <code>ArrayBuffer</code>，它符合标准的数据结构中数组的定义，它分配一片连续的内存空间，仅仅用来存储相同类型的数据。</p><h2 id="内容总结">内容总结<a href="post/array-differ#内容总结"></a></h2><p>数据结构和算法先于编程语言出现，编程语言中的一些数据类型，并不能跟数据结构和算法中数组的定义一一对应，它们往往会根据自身语言的特点，在实现上做一些调整。</p><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/array-differ.png?raw=true" alt="c/c++-基本数据类型数组" data-zoomable></p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据结构与算法中的“数组”与编程语言中的“数组”，它们并不完全等同。编程语言在实现自己的“数组”类型的时候，并不是完全遵循数据结构“数组”的定义，而是针对编程语言自身的特点，做了调整。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="摘录" scheme="http://yoursite.com/tags/%E6%91%98%E5%BD%95/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数组-最基础的数据结构</title>
    <link href="http://yoursite.com/post/array-analysis/"/>
    <id>http://yoursite.com/post/array-analysis/</id>
    <published>2019-05-13T01:09:47.000Z</published>
    <updated>2019-05-13T09:03:15.599Z</updated>
    
    <content type="html"><![CDATA[<p>数组（Array）是一种线性表数据结构，它用一组连续的内存空间，来存储一组具有相同类型的数据。</p><a id="more"></a><blockquote><p>为什么很多编程语言中数组都从 0 开始编号？</p></blockquote><p>从 1 开始不是更符合人类的思维习惯吗？</p><h2 id="数组如何实现随机访问">数组如何实现随机访问<a href="post/array-analysis#数组如何实现随机访问"></a></h2><blockquote><p>什么是数组？</p></blockquote><p>数组（Array）是一种<strong>线性表</strong>数据结构，它用<strong>一组连续的内存空间</strong>，来存储一组具有<strong>相同类型</strong>的数据。</p><h3 id="线性表（Linear-List）">线性表（Linear List）<a href="post/array-analysis#线性表（Linear-List）"></a></h3><p>线性表就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向，除了数组，链表、队列、栈等也是线性表结构。</p><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/arrar-linear-list.jpg?raw=true" alt="线性图" data-zoomable></p></div><p>而与它相对立的概念就是非线性表。在非线性表中，数据之间并不是简单的前后关系。比如二叉树、堆、图等。</p><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/array-no-linear-list.png?raw=true" alt="非线性图" data-zoomable></p></div><h3 id="连续的内存空间和相同类型的数据">连续的内存空间和相同类型的数据<a href="post/array-analysis#连续的内存空间和相同类型的数据"></a></h3><p>正是因为有了这两个限制，它才有了一个“杀手锏”的特性：“<strong>随机访问</strong>”。</p><blockquote><p>数组是如何实现根据下标随机访问的数组元素的？</p></blockquote><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/array-address.jpg?raw=true" alt="随机访问图" data-zoomable></p></div><p>上图中，计算机给数组 a[10] 分配了一块连续内存空间 1000~1039，其中，内存块的首地址为 base_address = 1000。</p><p>计算机会给每个<strong>内存单元</strong>（比如定义的数组 a[10]）分配一个地址，计算机<strong>通过地址来访问内存中的数据</strong>。当计算机需要随机访问数组中的某个元素时，它会首先通过下面的<strong>寻址公式</strong>，计算该元素存储的内存地址：</p><p><code>a[i]_address = base_address + i * data_type_size</code></p><p>其中 <code>data_type_size</code> 表示数组中每个元素的大小（元素数据类型的字节大小）。比如上面例子中，数组中存储的是 int 类型的数据，所以 <code>data_type_size</code> 就是 4 个字节。</p><p><strong>数组支持随机访问，根据下标随机访问的时间复杂度为 O(1)</strong>。</p><p>数组的<strong>连续的内存空间和相同类型的数据</strong>特性有利也有弊，这两个限制也让数组的很多操作变得非常低效，比如要想在数组中删除、插入一个数据，为了保证连续性，就需要做大量的数据搬移工作。</p><h2 id="低效的“插入”和“删除”">低效的“插入”和“删除”<a href="post/array-analysis#低效的“插入”和“删除”"></a></h2><blockquote><p>为什么会导致低效？又有哪些改进的方法？</p></blockquote><h3 id="插入操作">插入操作<a href="post/array-analysis#插入操作"></a></h3><p><strong>场景</strong>：假设数组的长度为 n，现在，如果我们需要将一个数据插入到数组中的第 k 个位置，为了把第 k 个位置腾出来，给新来的数据，我们需要将第 k~n 这部分的元素都顺序地往后挪一位。</p><p><strong>提问</strong>：上面插入操作地时间复杂度是多少呢？</p><p><strong>分析</strong>：</p><p>如果在数组的末尾插入元素，那就不需要移动数据了，这时的最好时间复杂度为 O(1)；</p><p>但如果在数组的开头插入元素，那所有的数据都需要依次往后移动一位，所以最坏时间复杂度为 O(n)；</p><p>因为我们在每个位置插入元素的概率是一样的 1/n，所以平均情况时间复杂度为 (1+2+3+…+n)/n = O(n)。</p><p><strong>改进</strong>：</p><p>如果数组中的数据是有序的，我们在某个位置插入一个新的元素时，就必须按照刚才的方法搬移 k 之后的数据。</p><p>但是，如果数组中存储的数据并没有任何规律，数组只是被当作一个存储数据的集合。在这种情况下，如果要将某个数组插入到第 k 个位置，为了避免大规模的数据搬移，我们可以直接将第 k 位的数据搬移到数组元素的最后，把新的元素直接放入第 k 个位置。</p><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/array-insert-no-order.jpg?raw=true" alt="插入操作改进图" data-zoomable></p></div><p>在特定的场景下，在第 k 个位置插入一个元素的时间复杂度就会降为 O(1)。这个处理思想在快排中也会用到。</p><h3 id="删除操作">删除操作<a href="post/array-analysis#删除操作"></a></h3><p>跟插入数据类似，如果我们要删除第 k 个位置的数据，为了内存的连续性，也需要搬移数据，不然中间就会出现空洞，内存就不连续了。</p><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/array-remove.jpg?raw=true" alt="删除操作图" data-zoomable></p></div><p><strong>改进</strong>：</p><p>为了避免 d，e，f，g，h 这几个数据会被搬移三次，我们可以先记录下已经删除的数据。每次的删除操作并不是真正地搬移数据，只是记录数据已经被删除。当数组没有更多空间存储数据时，我们再触发执行一次真正地删除操作，这样就大大减少了删除操作导致的数据搬移。</p><p>上面就是 <strong>JVM 标记清除垃圾回收算法</strong>的核心思想。它指的是大多数主流虚拟机采用可达性分析算法来判断对象是否存活，在标记阶段，会遍历所有 GC ROOTS，将所有 GC ROOTS 可达的对象标记为存。只有当标记工作完成之后清理工作才会开始。</p><p><strong>很多时候我们并不是要去死记硬背某个数据结构或者算法，而是要学习它背后的思想和处理技巧，这些东西才是最有价值的</strong>。</p><h2 id="警惕数组的访问越界问题">警惕数组的访问越界问题<a href="post/array-analysis#警惕数组的访问越界问题"></a></h2><p>Java 本身会做越界检查，抛出 ‘java.lang.ArrayIndexOutOfBoundsException’。</p><h2 id="容器能否完全替代数组">容器能否完全替代数组<a href="post/array-analysis#容器能否完全替代数组"></a></h2><p>针对数组类型，很多语言都提供了容器类。比如 Java 中的 ArrayList。</p><blockquote><p>在项目开发中，什么时候适合数组？什么时候适合用容器呢？</p></blockquote><p>ArrayList 最大的优势就是可以<strong>将很多数组操作的细节封装起来</strong>。比如数组插入、删除数据时需要搬移其它数据等。另外，它还有一个优势，就是<strong>支持动态扩容</strong>。</p><p>数组本身在定义的时候需要<strong>预先指定大小</strong>，因为需要分配连续的内存空间。如果我们申请了大小为 10 的数组，当第 11 个数据需要存储到数组中时，我们就需<strong>要重新分配一块更大的空间，将原来的数据复制过去，然后再将新的数据插入</strong>。</p><p>如果使用 ArrayList，我们就完全不需要关心底层扩容逻辑，ArrayList 已经帮我们实现好了。每次存储空间不够的时候，它都会将空间自动扩容 1.5 倍大小。</p><p>但是，需要注意的是扩容操作涉及内存申请和数据搬移，是比较耗时的。所以，如果事先能确定需要存储的数据大小，最好<strong>在创建 ArrayList 的时候事先指定数据大小</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;User&gt; users = <span class="keyword">new</span> ArrayList(<span class="number">10000</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; ++i) &#123;</span><br><span class="line">  users.add(xxx)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="经验总结">经验总结<a href="post/array-analysis#经验总结"></a></h3><ol><li>Java ArrayList 无法存储基本类型，比如 int、long，需要封装为 Integer、Long 类，而 Autoboxing、Unboxing 又有一定的性能消耗，所以如果特别关注性能，或者希望使用基本类型，就可以选用数组；</li><li>如果数据大小事先已知，并且对数据的操作非常简单，用不到 ArrayList 提供的大部分方法，也可以选用数组；</li><li>当要表示多维数组时，用数组往往会更加直观。比如 <code>array [] []</code>，而用容器的话需要这样定义：ArrayList<arraylist> array。</arraylist></li></ol><h2 id="解答开篇">解答开篇<a href="post/array-analysis#解答开篇"></a></h2><blockquote><p>为什么很多编程语言中数组都从 0 开始编号？</p></blockquote><p>从数组存储的内存模型上来看，“下标”最确切的定义应该是“偏移（Offset）”。如果用 a 来表示数组的首地址，a[0] 就是偏移为 0 的位置，也就是首地址，a[k] 就表示偏移 k 个 type_size 的位置，所以计算 a[k] 的内存地址只需要用如下公式：</p><p><code>a[k]_address = base_address + k * type_size</code></p><p>但是，如果数组从 1 开始计数，那我们计算数组元素 a[k] 的内存地址就变为：</p><p><code>a[k]_address = base_address + (k - 1)*type_size</code></p><p>数组作为非常基础的数据结构，通过下标随机访问数组元素又是非常基础的编程操作，效率的优化就要尽可能做到极致。所以为了减少一次减法操作，数组选择了从 0 开始编号，而不是从 1 开始（原因有些勉强，历史原因）。</p><p>C 语言设计者用 0 开始计算数组下标，之后的 Java、JavaScript 等高级语言都效仿了 C 语言，或者说，为了在一定程度上减少 C 语言程序员学习 Java 的学习成本，因此继续沿用了从 0 开始计数的习惯。实际上，还有一些语言并不是从 0 开始计数的，甚至支持负数下标，比如 Python。</p><h2 id="内容总结">内容总结<a href="post/array-analysis#内容总结"></a></h2><p>数组用一块连续的内存空间，来存储相同类型的一组数据，最大的特点就是支持随机访问，但插入、删除操作也因此变得比较低效，平均情况时间复杂度为 O(n)。在平时的业务开发中，我们可以直接使用编程语言提供的容器类，但是，如果特别底层的开发，直接使用数组可能会更合适。</p><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/array-naotu.png?raw=true" alt="数组思维导图" data-zoomable></p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组（Array）是一种线性表数据结构，它用一组连续的内存空间，来存储一组具有相同类型的数据。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="摘录" scheme="http://yoursite.com/tags/%E6%91%98%E5%BD%95/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>编程语言的进化</title>
    <link href="http://yoursite.com/post/programe-language-evolution/"/>
    <id>http://yoursite.com/post/programe-language-evolution/</id>
    <published>2019-05-09T12:18:10.000Z</published>
    <updated>2019-05-09T15:04:40.242Z</updated>
    
    <content type="html"><![CDATA[<p>从编程范式演进的角度来谈编程语言的进化。包括过程式、函数式、面向对象、面向连接。</p><a id="more"></a><p>编程语言在信息科技发展中的位置，如同人类文明中语言所处的位置。而编程语言写出来的软件（及其源代码），如同人类文明中不断被继承下来的图书典籍。</p><p>如果你把编程语言升华为人类知识传承能力的进化，你就能清晰地预判到这样地未来：每一个小孩地基础教育中一定会有编程教育，就如同每一个小孩都需要学习物理和数学一样。</p><h2 id="编程范式的进化">编程范式的进化<a href="post/programe-language-evolution#编程范式的进化"></a></h2><p>编程语言从汇编开始，迭代至今，产生了一些编程范式。</p><h3 id="过程式">过程式<a href="post/programe-language-evolution#过程式"></a></h3><p>过程式就是<strong>以一条条命令的方式，让计算机按照我们的意愿来执行</strong>。过程式语言的代表有 C/C++、JavaScript、Go等。</p><p>过程式编程中最核心的两个概念：</p><ul><li><strong>结构体</strong>（自定义的类型），通过结构体对数据进行组合，可以构建出任意复杂的自定义数据结构；</li><li><strong>过程</strong>（函数），通过过程可以抽象出任意复杂的自定义指令，复用以前的，简化意图的表达。</li></ul><h3 id="函数式">函数式<a href="post/programe-language-evolution#函数式"></a></h3><p>函数式本质上是过程式编程的一种约束，它最核心的主张就是<strong>变量不可变</strong>，<strong>函数尽可能没有副作用</strong>（对于通用语言来说，所有函数都没有副作用是不可能的，内部有 IO 行为的函数就有副作用）。</p><p>既然变量不可变，函数没有副作用，自然人们犯错的机会也就更少，代码质量就会更高。大部分语言会比较难以彻底实施函数式的编程思想，但在思想上会有所借鉴。</p><p>函数式编程相对小众，因为这样写代码虽然质量高，但是学习门槛也高。</p><h3 id="面向对象">面向对象<a href="post/programe-language-evolution#面向对象"></a></h3><p><strong>面向对象在过程式的基础上，引入了对象（类）和对象方法（类成员函数），它主张尽可能把方法（其实就是过程）归纳到合适的对象（类）上，不主张全局函数（过程）</strong>。面向对象的语言代表有 Java、C#、C++、Go等等。</p><h3 id="从“面向对象”到“面向连接”">从“面向对象”到“面向连接”<a href="post/programe-language-evolution#从“面向对象”到“面向连接”"></a></h3><p><strong>面向对象的核心思想是引入契约，基于对象这样一个概念对代码的使用界面进行抽象和封装</strong>。它有两个显著的优点：</p><ul><li><p><strong>清晰的使用界面</strong>，某种类型的对象有哪些方法一目了然，而不像过程式编程，数据结构和过程的关系是非常松散的。</p></li><li><p><strong>信息的封装</strong>，面向对象不主张绕过对象的使用接口侵入到对象的内部实现细节，因为这样做破坏了信息的封装，降低了类的可复用性，有一天对象的内部实现方式改变了，依赖该对象的相关代码也需要跟着调整。</p></li></ul><p>面向对象还有一个至关重要的概念是“<strong>接口</strong>”，通过接口，我们可以优雅地实现过程式编程中很费劲才能做到地一个能力：<strong>多态</strong>。</p><p>由于对象和对象方法地强关联，我们可以引入接口来抽象不同对象相同地行为（比如鸟和猪是不同的而对象，但是它们有相同的方法，比如移动和吃东西），这样不同对象就可以用相同的代码来实现类似的复杂行为，这就是多态了。</p><p>多数面向对象语言还会引入一个叫<strong>继承</strong>（过度设计）的概念。虽然继承带来了编码上的便捷性，但也带来了不必要的心智负担：本来复合对象的唯一构造方法是组合，现在多了一个选择，继承。</p><p><strong>不同编程范式并不是互斥的</strong>。虽然有些语言会有明确的编程范式主张，比如 Java 是纯正的面向对象语言，它反对全局过程。但是，也有一些语言明确主张说自己是多范式的，典型代表 C++。</p><p>可能 Go 语言是多范式更好的例子。它没有声称自己是多范式，但是实际上每一种编程范式它都保留了精华部分。这并没有使得 Go 语言变得很复杂，整个语言的特性及其精简。Go 是一门面向连接的语言。</p><blockquote><p>什么是面向连接的语言？</p></blockquote><p><strong>所谓面向连接就是朴素的组合思想</strong>。研究连接，就是研究人与人如何组合，研究代码与代码之间怎么组合。架构思维的核心法则也是组合。</p><p>面向对象创造性的把契约的重要性提高到了非常重要的高度，但这还远远不够。这是因为，并不是只有对象需要契约，<strong>语言设计的方方面面都需要契约</strong>。比如代码规范约束了人的行为，是人与人的连接契约。消息传递（多核背景下的一种编程思想，其核心主张是：尽可能用消息传递来取代共享内存，从而尽可能避免显式的锁，降低编程负担）约束了进程的行为，是进程与进程的连接契约。</p><h2 id="其它方面的进化">其它方面的进化<a href="post/programe-language-evolution#其它方面的进化"></a></h2><p>除了编程范式，编程语言的进化还体现在<strong>工程化</strong>能力的完善上，过程化能力主要体现在如下方面：</p><ul><li>包（package），代码的发布单元</li><li>版本（version），包的依赖管理</li><li>文档生成（doc）</li><li>单元测试（test）</li></ul><p>从<strong>语言执行器</strong>的行为看，出现了三种分类的语言：</p><ul><li>编译的目标文件为可执行程序，如 C/C++、Go等</li><li>生成跨平台的虚拟机字节码，有独立的执行器（虚拟机）执行字节码，如 Java</li><li>直接解释执行，典型代表是 JavaScript。</li></ul><h2 id="语言对架构的影响">语言对架构的影响<a href="post/programe-language-evolution#语言对架构的影响"></a></h2><blockquote><p>从架构设计的角度，编程语言的选择对架构的影响是什么？</p></blockquote><p>软件的架构包括一部分是业务无关的框架和基础库，还有一部分是业务架构。</p><p>从软件的业务架构来说本身应该怎么拆分模块，每个模块具体做什么事情（业务边界是什么），这是业务需求本身决定的，和编程语言无关。但在我们描述每个模块的规格时，采用的规格描述语言会面临两种选择：</p><ul><li>选择某种语言无关的接口表示；</li><li>选择团队开发时采用的语言来描述接口。</li></ul><p>两种选择的差异并不是实质性的，只要团队内有共识，选哪一种都无所谓。“如无必要勿增实体”的原则，倾向用开发语言来做接口表示。</p><p>站在唯技术论的角度，业务架构和语言无关，影响的只是模块规格的描述语法。但语言的选择在实践中对业务架构决策的影响仍然极其关键，因为考虑开发效率和后期维护。</p><h2 id="内容总结">内容总结<a href="post/programe-language-evolution#内容总结"></a></h2><p>从编程范式演进的角度来谈编程语言的进化。包括过程式、函数式、面向对象、面向连接。</p><blockquote><p>编程框架和编程范式的区别？</p></blockquote><p>编程框架通常是领域性的，它是一个或多个包（package），往往规定了某个领域的业务你应该怎么写；而编程范式是普适性的，不管解决什么领域的问题都可以适用。</p><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/programe-language-evolution.png?raw=true" alt="编程语言的进化" data-zoomable></p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从编程范式演进的角度来谈编程语言的进化。包括过程式、函数式、面向对象、面向连接。&lt;/p&gt;
    
    </summary>
    
    
      <category term="摘录" scheme="http://yoursite.com/tags/%E6%91%98%E5%BD%95/"/>
    
      <category term="架构设计" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>分析冯·诺依曼体系结构</title>
    <link href="http://yoursite.com/post/framework-von-neumann/"/>
    <id>http://yoursite.com/post/framework-von-neumann/</id>
    <published>2019-05-08T01:40:48.000Z</published>
    <updated>2019-05-08T07:37:46.213Z</updated>
    
    <content type="html"><![CDATA[<p>冯·诺依曼体系结构的不凡之处在于，它想“解决一切可以用‘计算’来解决的问题”。</p><a id="more"></a><h2 id="分析架构的关键点">分析架构的关键点<a href="post/framework-von-neumann#分析架构的关键点"></a></h2><blockquote><p>我们应该如何去分析架构设计中涉及的每一个零部件？</p></blockquote><p>换句话说，当我们设计或分析一个零部件时，我们会关心哪些问题？</p><h3 id="需求">需求<a href="post/framework-von-neumann#需求"></a></h3><p>这个零部件的作用是什么？它能用来做哪些事情？它不会被用来做哪些事情？</p><p>为何这个零部件被设计用来干这些事情，而不是多干一点事情，或少干某些事情？</p><h3 id="规格">规格<a href="post/framework-von-neumann#规格"></a></h3><p>这个零部件的接口是什么样的？它如何与其他零部件连接在一起的？</p><p><strong>规格是零部件的连接需求的抽象</strong>。符合规格的零部件可以有非常多种可能的实现方案，但是，一旦规格中的某个条件不能满足了，它就无法正常完成与其他零部件的连接，以达到预期的需求目标。</p><p><strong>规格的约束条件是非常多样化的</strong>。可能是外观（如形状和颜色）、交互方式（如键盘、鼠标、语音、触摸屏）、质量（硬度、耐热性等）。</p><p>那么，冯·诺依曼体系结构的需求和规格又是什么呢？</p><h2 id="冯·诺依曼体系结构分析">冯·诺依曼体系结构分析<a href="post/framework-von-neumann#冯·诺依曼体系结构分析"></a></h2><p><strong>冯·诺依曼体系结构不但是应用程序这座大厦的地基，同时也是整个信息科技的地基</strong>。事实上，它更像是一个无中生有的全新世界：在其中，有个体、有族群、有生态，还有喜怒哀乐。</p><p><strong>从需求来说，它想解决一切问题。解决一切可以用“计算”来解决的问题</strong>。</p><p>为了实现“解决一切可以用‘计算’来解决的问题”这个目标，冯·诺依曼引入了三类基础零部件：</p><ul><li>中央处理器</li><li>存储</li><li>输入输出设备</li></ul><p><strong>存储</strong>，它负责存放计算涉及的相关数据，作为计算的输入参数和输出结果。常见的<strong>存储设备</strong>非常多样化，比如：中央处理器内置的寄存器、内存、传统机械硬盘、USB 固态硬盘等等。</p><p>从中央处理器的角度，存储见到那分为两类：</p><ul><li>内置支持的存储（常规的处理器指令可直接访问），比如寄存器、内存、计算机主板的 ROM。</li><li>外置存储（中央处理器本身并不能直接读写其中的数据），输入输出设备。</li></ul><p><strong>冯·诺依曼体系涉及的“存储”，指的是中央处理器内置支持的存储</strong>。</p><p><strong>输入输出设备</strong>，每个设备通过一个端口与中央处理器连接。通过这个端口地址，中央处理器可以和设备进行数据交换。</p><p>数据交换设计的数据格式由设备定义，中央处理器并不理解。设备数据交换的发起方（设备使用方）通常理解并可以解释所接收的数据含义。为了方便使用，设备厂商或操作系统厂商通常会提供设备相关的驱动程序，把设备交换的细节隐藏起来，设备的使用方只需要调用相关的接口函数就可以操作设备。</p><p><strong>中央处理器</strong>，它负责程序（指令序列）的执行。指令序列也存放在存储里面，计算机加电启动后，中央处理器会从一个固定的存储地址开始执行。通常这个固定的存储地址指向计算机主板的 ROM 上的一段启动程序（BIOS），这段启动程序通常包含以下内容：</p><ul><li>存储设备的驱动程序，用以识别常规的外置存储设备，比如硬盘、光驱、U 盘；</li><li>基础外部设备的驱动程序，比如键盘、鼠标、显示器（显卡）；</li><li>设备和启动配置的基础管理能力；</li><li>在外置存储上执行程序的能力；</li><li>将执行权转移到外置存储上的操作系统启动程序，这样操作系统就开始干活了。</li></ul><p><strong>“计算”需求的多样性只需要通过调整计算机主板上的 BIOS 程序，乃至外置存储中的操作系统启动程序就可以实现了，而不必去修改中央处理器本身</strong>。</p><p>中央处理器支持的指令分类：</p><ul><li>计算类，各类数学运算；</li><li>I/O 类，从存储读写数据，从输入输出设备读写数据；</li><li>指令跳转类，在满足特定条件下跳转到新的当前程序执行位置、调用自定义函数。</li></ul><p>和“解决一切可以用‘计算’来解决的问题”这个伟大的目标相比，冯·诺依曼体系的三类零部件的规格设计显得如此精简。</p><blockquote><p>为什么这么简洁的规格设计，居然可以解决这么复杂的需求？</p></blockquote><h2 id="需求是怎么被满足的？">需求是怎么被满足的？<a href="post/framework-von-neumann#需求是怎么被满足的？"></a></h2><p>对于“解决一切可以用‘计算’来解决的问题”这样一个模糊的需求，如果你是“电脑”这个产品的主架构师，你会如何应对？</p><p>分析思路如下：</p><p>一方面，需求的变化点在于，要解决的问题是五花八门包罗万象的。如何以某种稳定但可扩展的架构来支持这样的变化呢？</p><p>另一方面，需求的稳定点在于，电脑的核心能力是固定的，怎么表达电脑的核心能力？</p><p>电脑的核心能力是“计算”。</p><p>什么是计算？计算就是对一个数据（输入）进行变换，变为另一个数据（输出）。在数学中把它叫作“函数”。</p><p><code>y = f(x)</code></p><p>x、y 是数据，可以是简单的数值，也可能是文本、图片、视频，各种我们对现实问题进行参数化建模后的测量值，当然也可能是多个输入数据。但无论它的逻辑含义是什么，物理上都可以以一段连续的字节内容来表达。</p><p>x、y 物理上在哪里？</p><p>“存储”这个概念就产生了。存储就是存放计算所要操作数据的所在。</p><p>一个具体的计算（函数）怎么表达？</p><p>计算（函数）对于电脑的架构师来说是未知的，那么怎么设计一种系统架构让用户可以表达任意复杂的计算（函数）？</p><p>逻辑上来看，无论多么复杂的自定义函数，都可以通过下面这些元素的组合来定义：</p><ul><li>内置函数，整数或小数运算</li><li>循环和条件分支</li><li>子函数（自定义函数） </li></ul><p>因此，<strong>对于任意的具体的计算（自定义函数）来说，都可以用一组指令序列来表达</strong>。</p><p>那么函数物理上在哪里？</p><p>函数以指令序列形式存放在存储里面。也就是说，存储不只存放计算索要操作的数据，也存放“计算”本身。</p><p>只是，存储里面存放的“计算”只是数据，需要有人理解并执行这些数据背后的计算行为，才变成真正意义的“计算”。这个执行者，就是中央处理器（CPU），它支持很多计算指令，包括执行内置函数、循环和条件分支、执行子函数等。</p><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/framework-von1.png?raw=true" alt="中央处理器+存储" data-zoomable></p></div><p>电脑有了“中央处理器+存储”，即有了计算的能力和计算的数据，但无法和现实世界发生交互。</p><p><strong>交互，抽象来看就是输入和输出</strong>。对于电脑来说，输入和输出的需求多样化。</p><p>从输入需求来说，可能采集静态图像、声音、视频；也可能采集结构化的数据，如 GPS 位置、脉搏、心电图、温度、湿度等；还可能是用户控制指令，如键盘按键、鼠标、触摸屏动作等。</p><p>从输出需求来说，可能像屏幕输出信息；播放声音；执行某个动作如交通灯开关、打印机打印等。</p><p>不管是什么样交互用途的设备，我们要做的只是定义好统一的数据交换协议？</p><p>因此中央处理器不仅要有“计算”能力，还要有“数据交换”能力（IO 能力）。</p><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/framework-von2.png?raw=true" alt="中央处理器+存储+输入输出设备" data-zoomable></p></div><p>输入输出设备从根本上解决了什么问题？</p><p>是电脑无限扩展的能力。最重要的是，输入输出设备和电脑是完全异构的。输入输出设备对电脑来说就只是实现了某项功能的黑匣子。如果把交互能力也看作是一种计算能力的话，电脑理论上能够解决的“计算”问题变得无所不包。</p><h2 id="内容总结">内容总结<a href="post/framework-von-neumann#内容总结"></a></h2><p>架构的第一步是<strong>需求分析</strong>，从需求分析角度来说，关键要抓住需求的<strong>稳定点</strong>和<strong>变化点</strong>。需求的稳定点，往往是系统的核心价值点；而需求的变化点，则往往需要相应去做开放性设计。</p><p>对于电脑这个产品来说，需求的稳定点是电脑的 <strong>“计算”能力</strong> ，需求的变化点，一是用户 <strong>“计算”需求</strong> 的多样性，二是<strong>用户交互方式</strong>的多样性。</p><p>电脑的“计算”能力，最终体现为中央处理器的指令集，这是需求相对稳定的部分。</p><p>用户“计算”需求的多样性，只需要通过调整计算机主板上的 BIOS 程序，乃至外置存储中的操作系统启动程序来实现，而不必去修改中央处理器本身。</p><p>用户交互方式的多样性，则通过定义外部设备与中央处理器的数据交换协议实现。</p><p><strong>分析需求的稳定点和变化点</strong></p><p>描述需求需要几个典型的要素：</p><ol><li>用户，面向的人群；</li><li>他们有什么要解决的问题；</li><li>解决这个问题的核心系统</li></ol><p>只有满足了上面几个要素的需求才能进一步讨论变化点和稳定点。</p><p><strong>存储让数据跨越时间，传输让数据跨越空间，计算让数据改变形式。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;冯·诺依曼体系结构的不凡之处在于，它想“解决一切可以用‘计算’来解决的问题”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="摘录" scheme="http://yoursite.com/tags/%E6%91%98%E5%BD%95/"/>
    
      <category term="架构设计" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>最好/最坏/平均/均摊时间复杂度分析</title>
    <link href="http://yoursite.com/post/complexity-analysis2/"/>
    <id>http://yoursite.com/post/complexity-analysis2/</id>
    <published>2019-05-06T07:13:59.000Z</published>
    <updated>2019-05-06T10:54:05.373Z</updated>
    
    <content type="html"><![CDATA[<p>同一段代码，在不同输入的情况下，复杂度量级可能是不一样的。</p><a id="more"></a><ul><li>最好情况时间复杂度（best case time complexity）</li><li>最坏情况时间复杂度（worst case time complexity）</li><li>平均情况时间复杂度（average case time complexity）</li><li>均摊时间复杂度（amoritized time complexity）</li></ul><h2 id="基础复杂度分析回顾">基础复杂度分析回顾<a href="post/complexity-analysis2#基础复杂度分析回顾"></a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例1</span></span><br><span class="line"><span class="comment">// n 表示 array 长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> n, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> pos = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span>(array[i] == x) pos = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面示例1代码的功能是，在一个无序的数组（array）中，查找变量 x 出现的位置，如果没有找到就返回 -1。通过之前的分析方法，该代码算法的时间复杂度是 O(n)。</p><p>我们在数组中查找一个数据，并不需要每次都把整个数组都遍历一遍，因为有可能中途找到就可以提前结束循环。所以优化示例1中的代码得到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例2</span></span><br><span class="line"><span class="comment">// n 表示 array 长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> n, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> pos = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span>(array[i] == x) &#123;</span><br><span class="line">        pos = i;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们优化完代码后，示例2中的时间复杂度还是 O(n) 吗？</p></blockquote><p>分析：因为我们要查找的变量 x 可能出现在数组的任意位置。如果数组中的第一个元素正好是要查找的变量 x，那就不需要再继续遍历剩下的 n-1 个数据了，那时间复杂度就是 O(1)。但如果数组中不存在变量 x，那我们就需要把整个数组都遍历一遍，时间复杂度就变成了 O(n)。所以不同的情况下，示例2中的时间复杂度是不一样的。</p><h2 id="最好情况时间复杂度">最好情况时间复杂度<a href="post/complexity-analysis2#最好情况时间复杂度"></a></h2><p>最好情况时间复杂度，就是在最理想的情况下，执行代码的时间复杂度。</p><p>在示例2中，在最理想的情况下，要查找的变量 x 正好是数组的第一个元素，这个时候对应的时间复杂度 O(1) 就是最好情况时间复杂度。</p><h2 id="最坏情况时间复杂度">最坏情况时间复杂度<a href="post/complexity-analysis2#最坏情况时间复杂度"></a></h2><p>最坏情况时间复杂度，就是在最糟糕的情况下，执行代码的时间复杂度。</p><p>在示例2中，在最坏的情况下，要查找的变量 x 不在数组中，我们需要把整个数组都遍历一遍才行，这个时候对应的时间复杂度 O(n) 就是最好情况时间复杂度。</p><h2 id="平均情况时间复杂度">平均情况时间复杂度<a href="post/complexity-analysis2#平均情况时间复杂度"></a></h2><p>我们都知道最好情况时间复杂度和最坏情况时间复杂度对应的都是极端情况下的代码时间复杂度，发生的概率其实并不大。所以引入平均情况时间复杂度，简称<strong>平均时间复杂度</strong>。</p><blockquote><p>平均时间复杂度怎么分析?</p></blockquote><p>在示例2中，我们要查找的变量 x 在数组中的位置，有 n+1 种情况：</p><ul><li>在数组的 0~n-1 位置中</li><li>不在数组中</li></ul><p>我们把每种情况下，查找需要<strong>遍历的元素个数累加起来</strong>,然后再除以 n+1，就可以得到需要遍历的<strong>元素个数</strong>的平均值，即：</p><p><code>(1+2+3...+n+n)/(n+1) = n(n+3)/2(n+1)</code></p><p>根据时间复杂度大 O 表示法，上面的公式简化后，得到的平均复杂度就是 O(n)。</p><blockquote><p>上面的 n+1 种情况出现的概率并不是一样的，又该怎么处理？</p></blockquote><p>我们假设在数组中和不在数组中的概率都是 1/2，另外要查找的数据出现在 0~n-1 这 n 个位置的概率是一样的，为 1/n。所以，根据概率乘法原则，要查找的数据出现在 0~n-1 中任意位置的概率就是 1/(2n)。</p><p>把各种情况发生的概率考虑进去，那么平均复杂度的计算过程变成了：</p><p><code>(1+2+3...+n)*(1/2n)+n*(1/2) = (3n+1)/4</code></p><p>上面的计算结果就是<strong>加权平均值</strong>（<strong>期望值</strong>），所以平均时间复杂度的全称叫<strong>加权平均时间复杂度</strong>或<strong>期望时间复杂度</strong>。</p><p>引入概率后，最终示例2代码的加权平均时间复杂度仍然是 O(n)。</p><p>实际上在大多数情况下，我们不需要区分最好、最坏、平均情况时间复杂度三种情况，使用一个复杂度就可以满足要求了。只有同一块代码在不同的情况下，时间复杂度有量级的差距时，才会使用这三种复杂度表示来区分。</p><h2 id="均摊时间复杂度">均摊时间复杂度<a href="post/complexity-analysis2#均摊时间复杂度"></a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例3</span></span><br><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(count == array.length) &#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class="line">      sum = sum + array[i];</span><br><span class="line">    &#125;</span><br><span class="line">    array[<span class="number">0</span>] = sum;</span><br><span class="line">    count = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  array[count] = val;</span><br><span class="line">  ++count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面示例3代码的功能是往数组中插入数据。当数组满了之后，用 for 循环遍历数组求和，将求和之后的 sum 值放到数组的第一个位置，然后再将新的数据依次插入。</p><p>示例3代码的时间复杂度分析如下：</p><p>最理想的情况下，数组中有空闲空间，所以最好情况时间复杂度为 O(1)。最坏的情况下，数组中没有空闲空间了，我们需要先做一次数组的遍历求和，然后再将数据插入，所以最坏情况时间复杂度为 O(n)。</p><p>平均时间复杂度呢？</p><p>假设数组的长度为 n，根据数据插入的位置的不同，我们可以分为 n 种情况，每种情况的时间复杂度是 O(1)，除此之外，还有一种情况是，在数组没有空闲空间时插入一个数据，这个时候的时间复杂度是 O(n)，而且这 n+1 种情况发生的概率一样，都是 1/(n+1)。所以根据加权平均的计算方法，得到的期望时间复杂度是：</p><p><code>(1+1+1...+n)/(n+1) = O(1)</code></p><blockquote><p>示例3代码的平均时间复杂度不需要引入概率？</p></blockquote><p>对比示例2代码中的 find() 函数和示例3代码中的 insert() 函数</p><ul><li>find() 函数在极端情况下，复杂度才为 O(1)，但 insert() 函数在大部分情况下，时间复杂度都为 O(1)，只要个别情况下复杂度才比较高，为 O(n)。</li><li>insert() 函数，O(1) 复杂度的插入和 O(n) 时间复杂度的插入，出现的频率非常有规律，而且有一定的前后时序关系，一般都是一个 O(n) 插入之后，紧跟着 n-1 个 O(1) 的插入操作，循环往复。</li></ul><p>针对这样的特殊情况，我们引入一种更加简单的分析方法：<strong>摊还分析法</strong>，通过该分析方法得到的时间复杂度叫<strong>均摊时间复杂度</strong>。</p><blockquote><p>如何使用摊还分析法来分析算法的均摊时间复杂度？</p></blockquote><p>继续上面示例3中的代码，每一次 O(n) 的插入操作，都会跟着 n-1 次的 O(1) 的插入操作。所以把耗时多的那次操作均摊到接下来的 n-1 次耗时操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。</p><p>对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一起分析，看是否能将较高时间复杂度那次操作的耗时，平均到其他那些时间复杂度比较低的操作上。而且，在能够应用均摊时间复杂度的分析场合，<strong>一般均摊时间复杂度就等于最好情况时间复杂度</strong>。</p><p><strong>均摊时间复杂度是一种特殊的平均时间复杂度</strong>。</p><h2 id="内容小结">内容小结<a href="post/complexity-analysis2#内容小结"></a></h2><p>因为同一段代码，在不同的输入情况下，复杂度量级有可能是不一样的。所以引入了最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度和均摊时间复杂度。</p><p>平均情况时间复杂度和均摊时间复杂度基本上是同一个概念，<strong>均摊是特殊的平均</strong>。在分析时间复杂度是 O(1) 还是 O(n) 的时候，出现 O(1) 的次数远大于出现 O(n) 出现的次数时，平均情况/摊还时间复杂度就是 O(1)。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;同一段代码，在不同输入的情况下，复杂度量级可能是不一样的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="摘录" scheme="http://yoursite.com/tags/%E6%91%98%E5%BD%95/"/>
    
      <category term="复杂度分析" scheme="http://yoursite.com/tags/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>基础复杂度分析</title>
    <link href="http://yoursite.com/post/complexity-analysis/"/>
    <id>http://yoursite.com/post/complexity-analysis/</id>
    <published>2019-05-06T02:51:41.000Z</published>
    <updated>2019-05-06T07:25:22.452Z</updated>
    
    <content type="html"><![CDATA[<p>数据结构和算法本身解决的是“快”和“省”的问题，即如何让代码运行的更快，如何让代码更省存储空间。</p><a id="more"></a><h2 id="概述">概述<a href="post/complexity-analysis#概述"></a></h2><p>说到数据结构和算法，就一定离不开时间、空间复杂度分析。复杂度分析是整个算法学习的精髓，只要掌握了它，数据结构和算法的内容基本上就掌握了一半。</p><blockquote><p>为什么需要复杂度分析？</p></blockquote><p>我们把代码跑一遍，通过统计、监控、就能得到算法执行的时间和占用的内存大小。为什么还需要做时间、空间复杂度分析呢？</p><p>上面说的统计、监控的分析方法也叫作<strong>事后统计法</strong>，这种统计方法由很大的局限性。</p><ul><li>测试结果非常依赖测试环境</li><li>测试结果受数据规模的影响很大</li></ul><p>我们需要一个不用具体的测试数据来测试，就可以<strong>粗略地估计</strong>算法的执行效率的方法。这就是下面要介绍的时间、空间复杂度分析方法。</p><h2 id="大-O-复杂度表示法">大 O 复杂度表示法<a href="post/complexity-analysis#大-O-复杂度表示法"></a></h2><p>算法的执行效率，粗略的的讲，就是算法代码执行的时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &lt;= n; ++i) &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">  &#125;    </span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从 CPU 的角度来看，上面代码的每一行执行着类似的操作：<strong>读数据-运算-写数据</strong>。假设每行代码执行的时间一样长，<strong>所有代码的执行时间 T(n) 与每行代码的执行次数成正比</strong>。</p><h3 id="大-O-公式">大 O 公式<a href="post/complexity-analysis#大-O-公式"></a></h3><p><code>T(n) = O(f(n))</code></p><ul><li><code>T(n)</code>：代码执行的总时间；</li><li><code>n</code>：数据规模的大小；</li><li><code>f(n)</code>：每行代码执行的次数总和。</li></ul><p>所以示例1中代码的大 O 时间复杂度可表示为 <code>T(n) = O(2n + 2)</code>。</p><p>大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是<strong>表示代码执行时间随数据规模增长的变化趋势</strong>。所以，也叫作<strong>渐进时间复杂度</strong>(asymptotic time complexity)，简称<strong>时间复杂度</strong>。</p><p>当 n 很大时，公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略，我们只需要记录一个最大量级的就可以了。</p><h2 id="时间复杂度分析">时间复杂度分析<a href="post/complexity-analysis#时间复杂度分析"></a></h2><blockquote><p>如何分析一段代码的时间复杂度？</p></blockquote><ol><li>只需关注循环执行次数最多的一段代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例2</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  iny i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &lt;= n; ++i) &#123;</span><br><span class="line">    sum = sum + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例2中，第2、3行代码都是常量级的执行时间，与 n 的大小无关，所以对于复杂度没有影响。循环次数最多的是第4、5行代码，这两行代码被执行了 n 次，所以总的时间复杂度就是 O(n)。</p><ol start="2"><li>加法法则</li></ol><p>加法法则，总复杂度等于量级最大的那段代码的复杂度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例3</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum_1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> p = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; p &lt; <span class="number">100</span>; ++p) &#123;</span><br><span class="line">    sum_1 = sum_1 + p;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> sum_2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> q = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; q &lt; <span class="number">100</span>; ++q) &#123;</span><br><span class="line">    sum_2 = sum_2 + q;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> sum_3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &lt; <span class="number">100</span>; ++i) &#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; j &lt; <span class="number">100</span>; ++j) &#123;</span><br><span class="line">      sum_3 = sum_3 + i * j;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum_1 + sum_2 + sum_3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面示例3中的代码，第一段代码是常量级的执行时间，第二段代码的时间复杂度是 O(n)，第三段代码的时间复杂度是 O(n^2)。综合这三段代码的时间复杂度，我们取其中最大的量级。所以整段代码的时间复杂度是 O(n^2)。</p><p><strong>总的时间复杂度等于量级最大的那段代码的时间复杂度</strong>。抽象成公式如下：</p><p>如果 <code>T1(n) = O(f(n))</code>，<code>T2(n) = O(g(n))</code>，那么</p><p><code>T(n) = T1(n) + T2(n) = max(O(f(n)), O(g(n))) = O(max(f(n), g(n)))</code>。</p><ol start="3"><li>乘法法则</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例4</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &lt; n; ++i) &#123;</span><br><span class="line">    ret = ret + f(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &lt; n; ++i) &#123;</span><br><span class="line">    sum = sum + i;    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以把乘法法则看成是<strong>嵌套循环</strong>。抽象成公式如下：</p><p>如果 <code>T1(n) = O(f(n))</code>，<code>T2(n) = O(g(n))</code>，那么</p><p><code>T(n) = T1(n) * T2(n) = O(f(n)) * O(g(n)) = O(f(n) * g(n))</code>。</p><p>上面示例4整块代码的时间复杂度可表示为 O(n^2)。</p><h2 id="几种常见时间复杂度实例分析">几种常见时间复杂度实例分析<a href="post/complexity-analysis#几种常见时间复杂度实例分析"></a></h2><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/complexity-time-types.jpg?raw=true" alt="时间复杂度实例" data-zoomable></p></div><p>上图中罗列的复杂度量级，可以粗略地分为两类，<strong>多项式量级</strong>和<strong>非多项式量级</strong>。</p><p>其中非多项式量级只有：O(2^n) 和 O(n!)。当数据规模 n 越来越大时，非多项式量级算法的执行时间急剧增加，求解问题的执行时间会无限增长。所以，<strong>非多项式时间复杂度的算法是非常低效的算法</strong>。</p><h3 id="常见多项式时间复杂度">常见多项式时间复杂度<a href="post/complexity-analysis#常见多项式时间复杂度"></a></h3><ol><li>O(1)</li></ol><p>O(1) 只是常量级时间复杂度的一种表示方法。<strong>一般情况下，只要算法中不存在循环语句、递归语句，即便成千上万行的代码，其时间复杂度也是 O(1)</strong>。</p><ol start="2"><li>O(logn)、O(nlogn)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例5</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= n) &#123;</span><br><span class="line">    i = i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面示例5代码中可以看出，变量 i 的值从 1 开始取，每循环一次就乘以 2，当大于 n 时，循环结束。实际上变量 i 的取值就是一个等比数列：</p><p><code>2^1 2^2 2^3 ... 2^x = n</code></p><p>所以，我们只要知道 x 值是多少，就知道这行代码执行的次数了。求解 <code>2^x = n</code> 得到 <code>x = log2N</code>，所以这段代码的时间复杂度就是 O(log2N)。</p><p>实际上，不管是以 2 为底、以 3 为底，还是以 10 为底，我们可以把所有对数阶的时间复杂度都记为 O(logn)。因为对数之间是可以互相转换的。</p><p>如果一段代码的时间复杂度为 O(logn)，我们循环执行 n 遍，时间复杂度就是 O(nlogn) 了。归并排序、快速排序的时间复杂度都是 O(nlogn)。</p><ol start="3"><li>O(m+n)、O(m*n)</li></ol><p>另一种不一样的时间复杂度，代码的时间复杂度<strong>由两个数据的规模来决定</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例6</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum_1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &lt; m; ++i) &#123;</span><br><span class="line">      sum_1 = sum_1 + i;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> sum_2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; j &lt; n; ++j) &#123;</span><br><span class="line">      sum_2 = sum_2 + j;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum_1 + sum_2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面示例6的代码中，m 和 n 是表示两个数据规模，我们无法事先评估 m 和 n 谁的量极大，所以在表示时间复杂度的时候，就不能简单地利用加法法则省略掉其中一个，所以该代码的时间复杂度就是 O(m+n)。</p><p>如果 <code>T1(n) = O(f(n))</code>，<code>T2(n) = O(g(n))</code>，那么</p><p>加法法则： <code>T(n) = T1(n) + T2(n) = O(f(n) + g(n))</code>；</p><p>乘法法则：<code>T(n) = T1(n) * T2(n) = O(f(n) * g(n))</code>。</p><h2 id="空间复杂度分析">空间复杂度分析<a href="post/complexity-analysis#空间复杂度分析"></a></h2><p>空间复杂度全称就是<strong>渐进空间复杂度</strong>（asymptotic space complexity），<strong>表示算法的存储空间与数据规模之间的增长关系</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例7</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">  <span class="keyword">for</span>(; i &lt; n; ++i) &#123;</span><br><span class="line">      a[i] = i * i;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面示例7代码中，第三行申请了一个大小为 n 的 int 类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 O(n)。</p><p>我们常见的空间复杂度就是 O(1)、O(n)、O(n^2)，像 O(logn)、O(nlogn) 这样的对数阶复杂度平时都用不到。</p><h2 id="性能测试与复杂度分析之间的关系">性能测试与复杂度分析之间的关系<a href="post/complexity-analysis#性能测试与复杂度分析之间的关系"></a></h2><p>复杂度分析为我们提供了一个很好的理论分析的方向，使抽象的性能有了一个直观的表达。它虽然只是一个粗略的分析，但是可以和性能测试没有冲突，两者相辅相成。重点在于在编程的过程中，要具有这种复杂度分析的思维。</p><h2 id="内容小结">内容小结<a href="post/complexity-analysis#内容小结"></a></h2><p>复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率和数据规模之间的增长关系。可以粗略地表示，越高阶复杂度的算法，执行效率越低。</p><p>常见的复杂度，从低阶到高阶有：O(1)、O(n)、O(n^2)、O(logn) 和 o(nlogn)。</p><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/complesity-naotu.png?raw=true" alt="基础复杂度分析脑图" data-zoomable></p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据结构和算法本身解决的是“快”和“省”的问题，即如何让代码运行的更快，如何让代码更省存储空间。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="摘录" scheme="http://yoursite.com/tags/%E6%91%98%E5%BD%95/"/>
    
      <category term="复杂度分析" scheme="http://yoursite.com/tags/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>架构设计的宏观视角</title>
    <link href="http://yoursite.com/post/framework-macro/"/>
    <id>http://yoursite.com/post/framework-macro/</id>
    <published>2019-05-05T03:22:58.000Z</published>
    <updated>2019-05-08T07:28:14.875Z</updated>
    
    <content type="html"><![CDATA[<p>现在包罗万象的信息世界，正是在最底层的冯·诺依曼的基础体系上搭建而成，我们熟知的架构，则是最上层的业务架构。</p><a id="more"></a><h2 id="应用程序的基础架构">应用程序的基础架构<a href="post/framework-macro#应用程序的基础架构"></a></h2><h3 id="电脑的工作原理">电脑的工作原理<a href="post/framework-macro#电脑的工作原理"></a></h3><p>所有的电脑都可以统一看作由”<strong>中央处理器 + 存储 + 一系列的输入输出设备</strong>“构成。</p><ul><li><code>中央处理器</code>（CPU）：负责按指令执行命令；</li><li><code>存储</code>：负责保存数据，包括我们要执行的指令（以数据的形式保存在存储中）。</li></ul><blockquote><p>为什么电脑能够完成这么多复杂而多样化的工作？</p></blockquote><p>整个过程依赖以下两点：</p><p><strong>可编程性</strong>。CPU 指令是一个有限的指令集（计算类、I/O类、指令跳转类），但是 CPU 执行的指令序列（程序）并不是固定的，而是依赖保存在存储中的数据（程序员编写的软件）来决定的。指令序列的可能性是无穷的，这就意味着电脑能够做的事情也是无穷的。</p><p><strong>开放设计的外部设备支持</strong>。CPU 并不理解外部设备（键盘、打印机、屏幕等等）具体有什么样的能力，它只和这些设备交换数据。</p><p><strong>电脑的 CPU 是一个非常简洁的模型，它只读入和写出数据，对数据进行计算。</strong></p><h3 id="程序的运行原理">程序的运行原理<a href="post/framework-macro#程序的运行原理"></a></h3><p>有了上面基础的计算机体系，接下来我们就可以编写软件了。</p><p><strong>编程语言+编译器</strong> 的出现。编译器负责把我们人类容易理解的语言，转换为机器可以理解的机器指令。汇编语言的编译器将汇编语言写的程序翻译成为 CPU 指令序列，并将其保存到外置的存储设备上。</p><blockquote><p>多个软件在同一个电脑上怎么共处？</p></blockquote><p>多个软件大家往同一个存储地址写数据冲突？一起往打印机发送指令怎么办？等等</p><p><strong>操作系统</strong> 就出现了。它首先要解决的是软件治理的问题，包括建立安全保护机制和建立软件之间的协作秩序；其次解决的是基础编程接口的问题，一方面简化了软件开发，另一方面提供了多软件共存（多任务）的环境。</p><p>像上面所说的冯·诺依曼计算机体系、操作系统和编程语言，这些都是我们开发一个应用程序所依赖的<strong>基础架构</strong>。基础架构解决的是与业务无关的一些通用性的问题。而且，基础架构通常以独立的软件存在，所以也成为<strong>基础软件</strong>。</p><p>Linux、Nginx、MySQL、PHP 等这些软件都属于基础软件，这些基础软件极大的降低了应用开发的难度。在今天<strong>软件服务化</strong>的大趋势下，很多基础软件最终以互联网服务的方式提供，这就是所谓的“<strong>云计算</strong>”。</p><h2 id="应用程序的业务架构（应用架构）">应用程序的业务架构（应用架构）<a href="post/framework-macro#应用程序的业务架构（应用架构）"></a></h2><p>业务架构虽然会因为应用的领域不同而有很大的差异，但不同业务架构之间，仍然会有许多共通的地方。它们不止遵循相同的<strong>架构原则</strong>，还可以遵循相同的<strong>设计范示</strong>（交互领域-MVC、JS-Angular 等）。</p><h2 id="完整的程序架构">完整的程序架构<a href="post/framework-macro#完整的程序架构"></a></h2><p><strong>服务端</strong> 应用程序完整的程序架构</p><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/framework-server.jpg?raw=true" alt="服务端" data-zoomable></p></div><p><strong>客户端</strong> 应用程序完整的程序架构</p><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/framework-client.png?raw=true" alt="客户端" data-zoomable></p></div><h2 id="内容小结">内容小结<a href="post/framework-macro#内容小结"></a></h2><p>所有的电脑都可以看作由“<strong>中央处理器 + 存储 + 一系列输入输出设备</strong>”构成。中央处理器（CPU）负责指令执行命令；存储负责保存数据，包括要执行的命令。</p><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/framework-xsw1.png?raw=true" alt="思维导图" data-zoomable></p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在包罗万象的信息世界，正是在最底层的冯·诺依曼的基础体系上搭建而成，我们熟知的架构，则是最上层的业务架构。&lt;/p&gt;
    
    </summary>
    
    
      <category term="摘录" scheme="http://yoursite.com/tags/%E6%91%98%E5%BD%95/"/>
    
      <category term="架构设计" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
</feed>
