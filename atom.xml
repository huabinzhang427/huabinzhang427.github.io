<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张华宾的博客</title>
  
  <subtitle>先博而后渊</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-05T11:57:04.684Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ZhangHuaBin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>架构设计的宏观视角</title>
    <link href="http://yoursite.com/post/framework-macro/"/>
    <id>http://yoursite.com/post/framework-macro/</id>
    <published>2019-05-05T03:22:58.000Z</published>
    <updated>2019-05-05T11:57:04.684Z</updated>
    
    <content type="html"><![CDATA[<p>现在包罗万象的信息世界，正是在最底层的冯·诺依曼的基础体系上搭建而成，我们熟知的架构，则是最上层的业务架构。</p><a id="more"></a><h2 id="应用程序的基础架构">应用程序的基础架构<a href="post/framework-macro#应用程序的基础架构"></a></h2><h3 id="电脑的工作原理">电脑的工作原理<a href="post/framework-macro#电脑的工作原理"></a></h3><p>所有的电脑都可以统一看作由”<strong>中央处理器 + 存储 + 一系列的输入输出设备</strong>“构成。</p><ul><li><code>中央处理器</code>（CPU）：负责按指令执行命令；</li><li><code>存储</code>：负责保存数据，包括我们要执行的指令（以数据的形式保存在存储中）。</li></ul><blockquote><p>为什么电脑能够完成这么多复杂而多样化的工作？</p></blockquote><p>整个过程依赖以下两点：</p><p><strong>可编程性</strong>。CPU 指令是一个有限的指令集（计算类、I/O类、指令跳转类），但是 CPU 执行的指令序列（程序）并不是固定的，而是依赖保存在存储中的数据（程序员编写的软件）来决定的。指令序列的可能性是无穷的，这就意味着电脑能够做的事情也是无穷的。</p><p><strong>开放设计的外部设备支持</strong>。CPU 并不理解外部设备（键盘、打印机、屏幕等等）具体有什么样的能力，它只和这些设备交换数据。</p><p><strong>电脑的 CPU 是一个非常简洁的模型，它只读入和写出数据，对数据进行计算。</strong></p><h3 id="程序的运行原理">程序的运行原理<a href="post/framework-macro#程序的运行原理"></a></h3><p>有了上面基础的计算机体系，接下来我们就可以编写软件了。</p><p><strong>编程语言+编译器</strong> 的出现。编译器负责把我们人类容易理解的语言，转换为机器可以理解的机器指令。</p><blockquote><p>多个软件在同一个电脑上怎么共处？</p></blockquote><p>多个软件大家往同一个存储地址写数据冲突？一起往打印机发送指令怎么办？等等</p><p><strong>操作系统</strong> 就出现了。它首先要解决的是软件治理的问题，包括建立安全保护机制和建立软件之间的协作秩序；其次解决的是基础编程接口的问题，一方面简化了软件开发，另一方面提供了多软件共存（多任务）的环境。</p><p>像上面所说的冯·诺依曼计算机体系、操作系统和编程语言，这些都是我们开发一个应用程序所依赖的<strong>基础架构</strong>。基础架构解决的是与业务无关的一些通用性的问题。而且，基础架构通常以独立的软件存在，所以也成为<strong>基础软件</strong>。</p><p>Linux、Nginx、MySQL、PHP 等这些软件都属于基础软件，这些基础软件极大的降低了应用开发的难度。在今天<strong>软件服务化</strong>的大趋势下，很多基础软件最终以互联网服务的方式提供，这就是所谓的“<strong>云计算</strong>”。</p><h2 id="应用程序的业务架构（应用架构）">应用程序的业务架构（应用架构）<a href="post/framework-macro#应用程序的业务架构（应用架构）"></a></h2><p>业务架构虽然会因为应用的领域不同而有很大的差异，但不同业务架构之间，仍然会有许多共通的地方。它们不止遵循相同的<strong>架构原则</strong>，还可以遵循相同的<strong>设计范示</strong>（交互领域-MVC、JS-Angular 等）。</p><h2 id="完整的程序架构">完整的程序架构<a href="post/framework-macro#完整的程序架构"></a></h2><p><strong>服务端</strong> 应用程序完整的程序架构</p><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/framework-server.jpg?raw=true" alt="服务端" data-zoomable></p></div><p><strong>客户端</strong> 应用程序完整的程序架构</p><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/framework-client.png?raw=true" alt="客户端" data-zoomable></p></div><h2 id="总结">总结<a href="post/framework-macro#总结"></a></h2><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/framework-xsw.png?raw=true" alt="思维导图" data-zoomable></p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在包罗万象的信息世界，正是在最底层的冯·诺依曼的基础体系上搭建而成，我们熟知的架构，则是最上层的业务架构。&lt;/p&gt;
    
    </summary>
    
    
      <category term="架构设计" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="摘录" scheme="http://yoursite.com/tags/%E6%91%98%E5%BD%95/"/>
    
  </entry>
  
</feed>
