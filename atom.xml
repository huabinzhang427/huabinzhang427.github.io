<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张华宾的博客</title>
  
  <subtitle>先博而后渊</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-06T10:54:05.373Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ZhangHuaBin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>最好/最坏/平均/均摊时间复杂度分析</title>
    <link href="http://yoursite.com/post/complexity-analysis2/"/>
    <id>http://yoursite.com/post/complexity-analysis2/</id>
    <published>2019-05-06T07:13:59.000Z</published>
    <updated>2019-05-06T10:54:05.373Z</updated>
    
    <content type="html"><![CDATA[<p>同一段代码，在不同输入的情况下，复杂度量级可能是不一样的。</p><a id="more"></a><ul><li>最好情况时间复杂度（best case time complexity）</li><li>最坏情况时间复杂度（worst case time complexity）</li><li>平均情况时间复杂度（average case time complexity）</li><li>均摊时间复杂度（amoritized time complexity）</li></ul><h2 id="基础复杂度分析回顾">基础复杂度分析回顾<a href="post/complexity-analysis2#基础复杂度分析回顾"></a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例1</span></span><br><span class="line"><span class="comment">// n 表示 array 长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> n, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> pos = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span>(array[i] == x) pos = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面示例1代码的功能是，在一个无序的数组（array）中，查找变量 x 出现的位置，如果没有找到就返回 -1。通过之前的分析方法，该代码算法的时间复杂度是 O(n)。</p><p>我们在数组中查找一个数据，并不需要每次都把整个数组都遍历一遍，因为有可能中途找到就可以提前结束循环。所以优化示例1中的代码得到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例2</span></span><br><span class="line"><span class="comment">// n 表示 array 长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> n, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> pos = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span>(array[i] == x) &#123;</span><br><span class="line">        pos = i;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们优化完代码后，示例2中的时间复杂度还是 O(n) 吗？</p></blockquote><p>分析：因为我们要查找的变量 x 可能出现在数组的任意位置。如果数组中的第一个元素正好是要查找的变量 x，那就不需要再继续遍历剩下的 n-1 个数据了，那时间复杂度就是 O(1)。但如果数组中不存在变量 x，那我们就需要把整个数组都遍历一遍，时间复杂度就变成了 O(n)。所以不同的情况下，示例2中的时间复杂度是不一样的。</p><h2 id="最好情况时间复杂度">最好情况时间复杂度<a href="post/complexity-analysis2#最好情况时间复杂度"></a></h2><p>最好情况时间复杂度，就是在最理想的情况下，执行代码的时间复杂度。</p><p>在示例2中，在最理想的情况下，要查找的变量 x 正好是数组的第一个元素，这个时候对应的时间复杂度 O(1) 就是最好情况时间复杂度。</p><h2 id="最坏情况时间复杂度">最坏情况时间复杂度<a href="post/complexity-analysis2#最坏情况时间复杂度"></a></h2><p>最坏情况时间复杂度，就是在最糟糕的情况下，执行代码的时间复杂度。</p><p>在示例2中，在最坏的情况下，要查找的变量 x 不在数组中，我们需要把整个数组都遍历一遍才行，这个时候对应的时间复杂度 O(n) 就是最好情况时间复杂度。</p><h2 id="平均情况时间复杂度">平均情况时间复杂度<a href="post/complexity-analysis2#平均情况时间复杂度"></a></h2><p>我们都知道最好情况时间复杂度和最坏情况时间复杂度对应的都是极端情况下的代码时间复杂度，发生的概率其实并不大。所以引入平均情况时间复杂度，简称<strong>平均时间复杂度</strong>。</p><blockquote><p>平均时间复杂度怎么分析?</p></blockquote><p>在示例2中，我们要查找的变量 x 在数组中的位置，有 n+1 种情况：</p><ul><li>在数组的 0~n-1 位置中</li><li>不在数组中</li></ul><p>我们把每种情况下，查找需要<strong>遍历的元素个数累加起来</strong>,然后再除以 n+1，就可以得到需要遍历的<strong>元素个数</strong>的平均值，即：</p><p><code>(1+2+3...+n+n)/(n+1) = n(n+3)/2(n+1)</code></p><p>根据时间复杂度大 O 表示法，上面的公式简化后，得到的平均复杂度就是 O(n)。</p><blockquote><p>上面的 n+1 种情况出现的概率并不是一样的，又该怎么处理？</p></blockquote><p>我们假设在数组中和不在数组中的概率都是 1/2，另外要查找的数据出现在 0~n-1 这 n 个位置的概率是一样的，为 1/n。所以，根据概率乘法原则，要查找的数据出现在 0~n-1 中任意位置的概率就是 1/(2n)。</p><p>把各种情况发生的概率考虑进去，那么平均复杂度的计算过程变成了：</p><p><code>(1+2+3...+n)*(1/2n)+n*(1/2) = (3n+1)/4</code></p><p>上面的计算结果就是<strong>加权平均值</strong>（<strong>期望值</strong>），所以平均时间复杂度的全称叫<strong>加权平均时间复杂度</strong>或<strong>期望时间复杂度</strong>。</p><p>引入概率后，最终示例2代码的加权平均时间复杂度仍然是 O(n)。</p><p>实际上在大多数情况下，我们不需要区分最好、最坏、平均情况时间复杂度三种情况，使用一个复杂度就可以满足要求了。只有同一块代码在不同的情况下，时间复杂度有量级的差距时，才会使用这三种复杂度表示来区分。</p><h2 id="均摊时间复杂度">均摊时间复杂度<a href="post/complexity-analysis2#均摊时间复杂度"></a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例3</span></span><br><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(count == array.length) &#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class="line">      sum = sum + array[i];</span><br><span class="line">    &#125;</span><br><span class="line">    array[<span class="number">0</span>] = sum;</span><br><span class="line">    count = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  array[count] = val;</span><br><span class="line">  ++count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面示例3代码的功能是往数组中插入数据。当数组满了之后，用 for 循环遍历数组求和，将求和之后的 sum 值放到数组的第一个位置，然后再将新的数据依次插入。</p><p>示例3代码的时间复杂度分析如下：</p><p>最理想的情况下，数组中有空闲空间，所以最好情况时间复杂度为 O(1)。最坏的情况下，数组中没有空闲空间了，我们需要先做一次数组的遍历求和，然后再将数据插入，所以最坏情况时间复杂度为 O(n)。</p><p>平均时间复杂度呢？</p><p>假设数组的长度为 n，根据数据插入的位置的不同，我们可以分为 n 种情况，每种情况的时间复杂度是 O(1)，除此之外，还有一种情况是，在数组没有空闲空间时插入一个数据，这个时候的时间复杂度是 O(n)，而且这 n+1 种情况发生的概率一样，都是 1/(n+1)。所以根据加权平均的计算方法，得到的期望时间复杂度是：</p><p><code>(1+1+1...+n)/(n+1) = O(1)</code></p><blockquote><p>示例3代码的平均时间复杂度不需要引入概率？</p></blockquote><p>对比示例2代码中的 find() 函数和示例3代码中的 insert() 函数</p><ul><li>find() 函数在极端情况下，复杂度才为 O(1)，但 insert() 函数在大部分情况下，时间复杂度都为 O(1)，只要个别情况下复杂度才比较高，为 O(n)。</li><li>insert() 函数，O(1) 复杂度的插入和 O(n) 时间复杂度的插入，出现的频率非常有规律，而且有一定的前后时序关系，一般都是一个 O(n) 插入之后，紧跟着 n-1 个 O(1) 的插入操作，循环往复。</li></ul><p>针对这样的特殊情况，我们引入一种更加简单的分析方法：<strong>摊还分析法</strong>，通过该分析方法得到的时间复杂度叫<strong>均摊时间复杂度</strong>。</p><blockquote><p>如何使用摊还分析法来分析算法的均摊时间复杂度？</p></blockquote><p>继续上面示例3中的代码，每一次 O(n) 的插入操作，都会跟着 n-1 次的 O(1) 的插入操作。所以把耗时多的那次操作均摊到接下来的 n-1 次耗时操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。</p><p>对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一起分析，看是否能将较高时间复杂度那次操作的耗时，平均到其他那些时间复杂度比较低的操作上。而且，在能够应用均摊时间复杂度的分析场合，<strong>一般均摊时间复杂度就等于最好情况时间复杂度</strong>。</p><p><strong>均摊时间复杂度是一种特殊的平均时间复杂度</strong>。</p><h2 id="内容小结">内容小结<a href="post/complexity-analysis2#内容小结"></a></h2><p>因为同一段代码，在不同的输入情况下，复杂度量级有可能是不一样的。所以引入了最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度和均摊时间复杂度。</p><p>平均情况时间复杂度和均摊时间复杂度基本上是同一个概念，<strong>均摊是特殊的平均</strong>。在分析时间复杂度是 O(1) 还是 O(n) 的时候，出现 O(1) 的次数远大于出现 O(n) 出现的次数时，平均情况/摊还时间复杂度就是 O(1)。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;同一段代码，在不同输入的情况下，复杂度量级可能是不一样的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="摘录" scheme="http://yoursite.com/tags/%E6%91%98%E5%BD%95/"/>
    
      <category term="复杂度分析" scheme="http://yoursite.com/tags/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>基础复杂度分析</title>
    <link href="http://yoursite.com/post/complexity-analysis/"/>
    <id>http://yoursite.com/post/complexity-analysis/</id>
    <published>2019-05-06T02:51:41.000Z</published>
    <updated>2019-05-06T07:25:22.452Z</updated>
    
    <content type="html"><![CDATA[<p>数据结构和算法本身解决的是“快”和“省”的问题，即如何让代码运行的更快，如何让代码更省存储空间。</p><a id="more"></a><h2 id="概述">概述<a href="post/complexity-analysis#概述"></a></h2><p>说到数据结构和算法，就一定离不开时间、空间复杂度分析。复杂度分析是整个算法学习的精髓，只要掌握了它，数据结构和算法的内容基本上就掌握了一半。</p><blockquote><p>为什么需要复杂度分析？</p></blockquote><p>我们把代码跑一遍，通过统计、监控、就能得到算法执行的时间和占用的内存大小。为什么还需要做时间、空间复杂度分析呢？</p><p>上面说的统计、监控的分析方法也叫作<strong>事后统计法</strong>，这种统计方法由很大的局限性。</p><ul><li>测试结果非常依赖测试环境</li><li>测试结果受数据规模的影响很大</li></ul><p>我们需要一个不用具体的测试数据来测试，就可以<strong>粗略地估计</strong>算法的执行效率的方法。这就是下面要介绍的时间、空间复杂度分析方法。</p><h2 id="大-O-复杂度表示法">大 O 复杂度表示法<a href="post/complexity-analysis#大-O-复杂度表示法"></a></h2><p>算法的执行效率，粗略的的讲，就是算法代码执行的时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &lt;= n; ++i) &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">  &#125;    </span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从 CPU 的角度来看，上面代码的每一行执行着类似的操作：<strong>读数据-运算-写数据</strong>。假设每行代码执行的时间一样长，<strong>所有代码的执行时间 T(n) 与每行代码的执行次数成正比</strong>。</p><h3 id="大-O-公式">大 O 公式<a href="post/complexity-analysis#大-O-公式"></a></h3><p><code>T(n) = O(f(n))</code></p><ul><li><code>T(n)</code>：代码执行的总时间；</li><li><code>n</code>：数据规模的大小；</li><li><code>f(n)</code>：每行代码执行的次数总和。</li></ul><p>所以示例1中代码的大 O 时间复杂度可表示为 <code>T(n) = O(2n + 2)</code>。</p><p>大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是<strong>表示代码执行时间随数据规模增长的变化趋势</strong>。所以，也叫作<strong>渐进时间复杂度</strong>(asymptotic time complexity)，简称<strong>时间复杂度</strong>。</p><p>当 n 很大时，公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略，我们只需要记录一个最大量级的就可以了。</p><h2 id="时间复杂度分析">时间复杂度分析<a href="post/complexity-analysis#时间复杂度分析"></a></h2><blockquote><p>如何分析一段代码的时间复杂度？</p></blockquote><ol><li>只需关注循环执行次数最多的一段代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例2</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  iny i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &lt;= n; ++i) &#123;</span><br><span class="line">    sum = sum + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例2中，第2、3行代码都是常量级的执行时间，与 n 的大小无关，所以对于复杂度没有影响。循环次数最多的是第4、5行代码，这两行代码被执行了 n 次，所以总的时间复杂度就是 O(n)。</p><ol start="2"><li>加法法则</li></ol><p>加法法则，总复杂度等于量级最大的那段代码的复杂度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例3</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum_1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> p = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; p &lt; <span class="number">100</span>; ++p) &#123;</span><br><span class="line">    sum_1 = sum_1 + p;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> sum_2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> q = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; q &lt; <span class="number">100</span>; ++q) &#123;</span><br><span class="line">    sum_2 = sum_2 + q;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> sum_3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &lt; <span class="number">100</span>; ++i) &#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; j &lt; <span class="number">100</span>; ++j) &#123;</span><br><span class="line">      sum_3 = sum_3 + i * j;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum_1 + sum_2 + sum_3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面示例3中的代码，第一段代码是常量级的执行时间，第二段代码的时间复杂度是 O(n)，第三段代码的时间复杂度是 O(n^2)。综合这三段代码的时间复杂度，我们取其中最大的量级。所以整段代码的时间复杂度是 O(n^2)。</p><p><strong>总的时间复杂度等于量级最大的那段代码的时间复杂度</strong>。抽象成公式如下：</p><p>如果 <code>T1(n) = O(f(n))</code>，<code>T2(n) = O(g(n))</code>，那么</p><p><code>T(n) = T1(n) + T2(n) = max(O(f(n)), O(g(n))) = O(max(f(n), g(n)))</code>。</p><ol start="3"><li>乘法法则</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例4</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &lt; n; ++i) &#123;</span><br><span class="line">    ret = ret + f(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &lt; n; ++i) &#123;</span><br><span class="line">    sum = sum + i;    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以把乘法法则看成是<strong>嵌套循环</strong>。抽象成公式如下：</p><p>如果 <code>T1(n) = O(f(n))</code>，<code>T2(n) = O(g(n))</code>，那么</p><p><code>T(n) = T1(n) * T2(n) = O(f(n)) * O(g(n)) = O(f(n) * g(n))</code>。</p><p>上面示例4整块代码的时间复杂度可表示为 O(n^2)。</p><h2 id="几种常见时间复杂度实例分析">几种常见时间复杂度实例分析<a href="post/complexity-analysis#几种常见时间复杂度实例分析"></a></h2><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/complexity-time-types.jpg?raw=true" alt="时间复杂度实例" data-zoomable></p></div><p>上图中罗列的复杂度量级，可以粗略地分为两类，<strong>多项式量级</strong>和<strong>非多项式量级</strong>。</p><p>其中非多项式量级只有：O(2^n) 和 O(n!)。当数据规模 n 越来越大时，非多项式量级算法的执行时间急剧增加，求解问题的执行时间会无限增长。所以，<strong>非多项式时间复杂度的算法是非常低效的算法</strong>。</p><h3 id="常见多项式时间复杂度">常见多项式时间复杂度<a href="post/complexity-analysis#常见多项式时间复杂度"></a></h3><ol><li>O(1)</li></ol><p>O(1) 只是常量级时间复杂度的一种表示方法。<strong>一般情况下，只要算法中不存在循环语句、递归语句，即便成千上万行的代码，其时间复杂度也是 O(1)</strong>。</p><ol start="2"><li>O(logn)、O(nlogn)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例5</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= n) &#123;</span><br><span class="line">    i = i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面示例5代码中可以看出，变量 i 的值从 1 开始取，每循环一次就乘以 2，当大于 n 时，循环结束。实际上变量 i 的取值就是一个等比数列：</p><p><code>2^1 2^2 2^3 ... 2^x = n</code></p><p>所以，我们只要知道 x 值是多少，就知道这行代码执行的次数了。求解 <code>2^x = n</code> 得到 <code>x = log2N</code>，所以这段代码的时间复杂度就是 O(log2N)。</p><p>实际上，不管是以 2 为底、以 3 为底，还是以 10 为底，我们可以把所有对数阶的时间复杂度都记为 O(logn)。因为对数之间是可以互相转换的。</p><p>如果一段代码的时间复杂度为 O(logn)，我们循环执行 n 遍，时间复杂度就是 O(nlogn) 了。归并排序、快速排序的时间复杂度都是 O(nlogn)。</p><ol start="3"><li>O(m+n)、O(m*n)</li></ol><p>另一种不一样的时间复杂度，代码的时间复杂度<strong>由两个数据的规模来决定</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例6</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum_1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &lt; m; ++i) &#123;</span><br><span class="line">      sum_1 = sum_1 + i;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> sum_2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; j &lt; n; ++j) &#123;</span><br><span class="line">      sum_2 = sum_2 + j;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum_1 + sum_2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面示例6的代码中，m 和 n 是表示两个数据规模，我们无法事先评估 m 和 n 谁的量极大，所以在表示时间复杂度的时候，就不能简单地利用加法法则省略掉其中一个，所以该代码的时间复杂度就是 O(m+n)。</p><p>如果 <code>T1(n) = O(f(n))</code>，<code>T2(n) = O(g(n))</code>，那么</p><p>加法法则： <code>T(n) = T1(n) + T2(n) = O(f(n) + g(n))</code>；</p><p>乘法法则：<code>T(n) = T1(n) * T2(n) = O(f(n) * g(n))</code>。</p><h2 id="空间复杂度分析">空间复杂度分析<a href="post/complexity-analysis#空间复杂度分析"></a></h2><p>空间复杂度全称就是<strong>渐进空间复杂度</strong>（asymptotic space complexity），<strong>表示算法的存储空间与数据规模之间的增长关系</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例7</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">  <span class="keyword">for</span>(; i &lt; n; ++i) &#123;</span><br><span class="line">      a[i] = i * i;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面示例7代码中，第三行申请了一个大小为 n 的 int 类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 O(n)。</p><p>我们常见的空间复杂度就是 O(1)、O(n)、O(n^2)，像 O(logn)、O(nlogn) 这样的对数阶复杂度平时都用不到。</p><h2 id="性能测试与复杂度分析之间的关系">性能测试与复杂度分析之间的关系<a href="post/complexity-analysis#性能测试与复杂度分析之间的关系"></a></h2><p>复杂度分析为我们提供了一个很好的理论分析的方向，使抽象的性能有了一个直观的表达。它虽然只是一个粗略的分析，但是可以和性能测试没有冲突，两者相辅相成。重点在于在编程的过程中，要具有这种复杂度分析的思维。</p><h2 id="内容小结">内容小结<a href="post/complexity-analysis#内容小结"></a></h2><p>复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率和数据规模之间的增长关系。可以粗略地表示，越高阶复杂度的算法，执行效率越低。</p><p>常见的复杂度，从低阶到高阶有：O(1)、O(n)、O(n^2)、O(logn) 和 o(nlogn)。</p><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/complesity-naotu.png?raw=true" alt="基础复杂度分析脑图" data-zoomable></p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据结构和算法本身解决的是“快”和“省”的问题，即如何让代码运行的更快，如何让代码更省存储空间。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="摘录" scheme="http://yoursite.com/tags/%E6%91%98%E5%BD%95/"/>
    
      <category term="复杂度分析" scheme="http://yoursite.com/tags/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>架构设计的宏观视角</title>
    <link href="http://yoursite.com/post/framework-macro/"/>
    <id>http://yoursite.com/post/framework-macro/</id>
    <published>2019-05-05T03:22:58.000Z</published>
    <updated>2019-05-06T07:08:41.445Z</updated>
    
    <content type="html"><![CDATA[<p>现在包罗万象的信息世界，正是在最底层的冯·诺依曼的基础体系上搭建而成，我们熟知的架构，则是最上层的业务架构。</p><a id="more"></a><h2 id="应用程序的基础架构">应用程序的基础架构<a href="post/framework-macro#应用程序的基础架构"></a></h2><h3 id="电脑的工作原理">电脑的工作原理<a href="post/framework-macro#电脑的工作原理"></a></h3><p>所有的电脑都可以统一看作由”<strong>中央处理器 + 存储 + 一系列的输入输出设备</strong>“构成。</p><ul><li><code>中央处理器</code>（CPU）：负责按指令执行命令；</li><li><code>存储</code>：负责保存数据，包括我们要执行的指令（以数据的形式保存在存储中）。</li></ul><blockquote><p>为什么电脑能够完成这么多复杂而多样化的工作？</p></blockquote><p>整个过程依赖以下两点：</p><p><strong>可编程性</strong>。CPU 指令是一个有限的指令集（计算类、I/O类、指令跳转类），但是 CPU 执行的指令序列（程序）并不是固定的，而是依赖保存在存储中的数据（程序员编写的软件）来决定的。指令序列的可能性是无穷的，这就意味着电脑能够做的事情也是无穷的。</p><p><strong>开放设计的外部设备支持</strong>。CPU 并不理解外部设备（键盘、打印机、屏幕等等）具体有什么样的能力，它只和这些设备交换数据。</p><p><strong>电脑的 CPU 是一个非常简洁的模型，它只读入和写出数据，对数据进行计算。</strong></p><h3 id="程序的运行原理">程序的运行原理<a href="post/framework-macro#程序的运行原理"></a></h3><p>有了上面基础的计算机体系，接下来我们就可以编写软件了。</p><p><strong>编程语言+编译器</strong> 的出现。编译器负责把我们人类容易理解的语言，转换为机器可以理解的机器指令。</p><blockquote><p>多个软件在同一个电脑上怎么共处？</p></blockquote><p>多个软件大家往同一个存储地址写数据冲突？一起往打印机发送指令怎么办？等等</p><p><strong>操作系统</strong> 就出现了。它首先要解决的是软件治理的问题，包括建立安全保护机制和建立软件之间的协作秩序；其次解决的是基础编程接口的问题，一方面简化了软件开发，另一方面提供了多软件共存（多任务）的环境。</p><p>像上面所说的冯·诺依曼计算机体系、操作系统和编程语言，这些都是我们开发一个应用程序所依赖的<strong>基础架构</strong>。基础架构解决的是与业务无关的一些通用性的问题。而且，基础架构通常以独立的软件存在，所以也成为<strong>基础软件</strong>。</p><p>Linux、Nginx、MySQL、PHP 等这些软件都属于基础软件，这些基础软件极大的降低了应用开发的难度。在今天<strong>软件服务化</strong>的大趋势下，很多基础软件最终以互联网服务的方式提供，这就是所谓的“<strong>云计算</strong>”。</p><h2 id="应用程序的业务架构（应用架构）">应用程序的业务架构（应用架构）<a href="post/framework-macro#应用程序的业务架构（应用架构）"></a></h2><p>业务架构虽然会因为应用的领域不同而有很大的差异，但不同业务架构之间，仍然会有许多共通的地方。它们不止遵循相同的<strong>架构原则</strong>，还可以遵循相同的<strong>设计范示</strong>（交互领域-MVC、JS-Angular 等）。</p><h2 id="完整的程序架构">完整的程序架构<a href="post/framework-macro#完整的程序架构"></a></h2><p><strong>服务端</strong> 应用程序完整的程序架构</p><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/framework-server.jpg?raw=true" alt="服务端" data-zoomable></p></div><p><strong>客户端</strong> 应用程序完整的程序架构</p><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/framework-client.png?raw=true" alt="客户端" data-zoomable></p></div><h2 id="内容小结">内容小结<a href="post/framework-macro#内容小结"></a></h2><p>所有的电脑都可以看作由“<strong>中央处理器 + 存储 + 一系列输入输出设备</strong>”构成。中央处理器（CPU）负责指令执行命令；存储负责保存数据，包括要执行的命令。</p><div class="article-img"><p><img src="https://github.com/huabinzhang427/hexo-blog-source/blob/master/images/framework-xsw1.png?raw=true" alt="思维导图" data-zoomable></p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在包罗万象的信息世界，正是在最底层的冯·诺依曼的基础体系上搭建而成，我们熟知的架构，则是最上层的业务架构。&lt;/p&gt;
    
    </summary>
    
    
      <category term="摘录" scheme="http://yoursite.com/tags/%E6%91%98%E5%BD%95/"/>
    
      <category term="架构设计" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
</feed>
