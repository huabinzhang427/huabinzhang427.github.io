{"meta":{"title":"张华宾的博客","subtitle":"先博而后渊","description":null,"author":"ZhangHuaBin","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"架构设计的宏观视角","slug":"framework-macro","date":"2019-05-05T03:22:58.000Z","updated":"2019-05-05T11:57:04.684Z","comments":false,"path":"post/framework-macro/","link":"http://yoursite.com/post/framework-macro/","permalink":"http://yoursite.com/post/framework-macro/","excerpt":"现在包罗万象的信息世界，正是在最底层的冯·诺依曼的基础体系上搭建而成，我们熟知的架构，则是最上层的业务架构。","text":"现在包罗万象的信息世界，正是在最底层的冯·诺依曼的基础体系上搭建而成，我们熟知的架构，则是最上层的业务架构。 应用程序的基础架构电脑的工作原理所有的电脑都可以统一看作由”中央处理器 + 存储 + 一系列的输入输出设备“构成。 中央处理器（CPU）：负责按指令执行命令； 存储：负责保存数据，包括我们要执行的指令（以数据的形式保存在存储中）。 为什么电脑能够完成这么多复杂而多样化的工作？ 整个过程依赖以下两点： 可编程性。CPU 指令是一个有限的指令集（计算类、I/O类、指令跳转类），但是 CPU 执行的指令序列（程序）并不是固定的，而是依赖保存在存储中的数据（程序员编写的软件）来决定的。指令序列的可能性是无穷的，这就意味着电脑能够做的事情也是无穷的。 开放设计的外部设备支持。CPU 并不理解外部设备（键盘、打印机、屏幕等等）具体有什么样的能力，它只和这些设备交换数据。 电脑的 CPU 是一个非常简洁的模型，它只读入和写出数据，对数据进行计算。 程序的运行原理有了上面基础的计算机体系，接下来我们就可以编写软件了。 编程语言+编译器 的出现。编译器负责把我们人类容易理解的语言，转换为机器可以理解的机器指令。 多个软件在同一个电脑上怎么共处？ 多个软件大家往同一个存储地址写数据冲突？一起往打印机发送指令怎么办？等等 操作系统 就出现了。它首先要解决的是软件治理的问题，包括建立安全保护机制和建立软件之间的协作秩序；其次解决的是基础编程接口的问题，一方面简化了软件开发，另一方面提供了多软件共存（多任务）的环境。 像上面所说的冯·诺依曼计算机体系、操作系统和编程语言，这些都是我们开发一个应用程序所依赖的基础架构。基础架构解决的是与业务无关的一些通用性的问题。而且，基础架构通常以独立的软件存在，所以也成为基础软件。 Linux、Nginx、MySQL、PHP 等这些软件都属于基础软件，这些基础软件极大的降低了应用开发的难度。在今天软件服务化的大趋势下，很多基础软件最终以互联网服务的方式提供，这就是所谓的“云计算”。 应用程序的业务架构（应用架构）业务架构虽然会因为应用的领域不同而有很大的差异，但不同业务架构之间，仍然会有许多共通的地方。它们不止遵循相同的架构原则，还可以遵循相同的设计范示（交互领域-MVC、JS-Angular 等）。 完整的程序架构服务端 应用程序完整的程序架构 客户端 应用程序完整的程序架构 总结","categories":[],"tags":[{"name":"架构设计","slug":"架构设计","permalink":"http://yoursite.com/tags/架构设计/"},{"name":"摘录","slug":"摘录","permalink":"http://yoursite.com/tags/摘录/"}]}]}